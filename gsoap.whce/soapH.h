/* soapH.h
   Generated by gSOAP 2.8.21 from mds.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data),0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__uploadPackInfoResponse
#define SOAP_TYPE__ns1__uploadPackInfoResponse (39)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__uploadPackInfoResponse(struct soap*, const char*, int, const _ns1__uploadPackInfoResponse *, const char*);
SOAP_FMAC3 _ns1__uploadPackInfoResponse * SOAP_FMAC4 soap_in__ns1__uploadPackInfoResponse(struct soap*, const char*, _ns1__uploadPackInfoResponse *, const char*);

#ifndef soap_write__ns1__uploadPackInfoResponse
#define soap_write__ns1__uploadPackInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:uploadPackInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__uploadPackInfoResponse * SOAP_FMAC4 soap_get__ns1__uploadPackInfoResponse(struct soap*, _ns1__uploadPackInfoResponse *, const char*, const char*);

#ifndef soap_read__ns1__uploadPackInfoResponse
#define soap_read__ns1__uploadPackInfoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__uploadPackInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__uploadPackInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__uploadPackInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__uploadPackInfoResponse * soap_new__ns1__uploadPackInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__uploadPackInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__uploadPackInfoResponse * soap_new_req__ns1__uploadPackInfoResponse(struct soap *soap, std::string *out) { _ns1__uploadPackInfoResponse *_p = soap_instantiate__ns1__uploadPackInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__uploadPackInfoResponse::out = out; } return _p; }

inline _ns1__uploadPackInfoResponse * soap_new_set__ns1__uploadPackInfoResponse(struct soap *soap, std::string *out) { _ns1__uploadPackInfoResponse *_p = soap_instantiate__ns1__uploadPackInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__uploadPackInfoResponse::out = out; } return _p; }

inline void soap_delete__ns1__uploadPackInfoResponse(struct soap *soap, _ns1__uploadPackInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__uploadPackInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__uploadPackInfo
#define SOAP_TYPE__ns1__uploadPackInfo (38)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__uploadPackInfo(struct soap*, const char*, int, const _ns1__uploadPackInfo *, const char*);
SOAP_FMAC3 _ns1__uploadPackInfo * SOAP_FMAC4 soap_in__ns1__uploadPackInfo(struct soap*, const char*, _ns1__uploadPackInfo *, const char*);

#ifndef soap_write__ns1__uploadPackInfo
#define soap_write__ns1__uploadPackInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:uploadPackInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__uploadPackInfo * SOAP_FMAC4 soap_get__ns1__uploadPackInfo(struct soap*, _ns1__uploadPackInfo *, const char*, const char*);

#ifndef soap_read__ns1__uploadPackInfo
#define soap_read__ns1__uploadPackInfo(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__uploadPackInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__uploadPackInfo * SOAP_FMAC2 soap_instantiate__ns1__uploadPackInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__uploadPackInfo * soap_new__ns1__uploadPackInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns1__uploadPackInfo(soap, n, NULL, NULL, NULL); }

inline _ns1__uploadPackInfo * soap_new_req__ns1__uploadPackInfo(struct soap *soap, std::string *in0) { _ns1__uploadPackInfo *_p = soap_instantiate__ns1__uploadPackInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__uploadPackInfo::in0 = in0; } return _p; }

inline _ns1__uploadPackInfo * soap_new_set__ns1__uploadPackInfo(struct soap *soap, std::string *in0) { _ns1__uploadPackInfo *_p = soap_instantiate__ns1__uploadPackInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__uploadPackInfo::in0 = in0; } return _p; }

inline void soap_delete__ns1__uploadPackInfo(struct soap *soap, _ns1__uploadPackInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__uploadPackInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__getAlarmResponse
#define SOAP_TYPE__ns1__getAlarmResponse (37)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getAlarmResponse(struct soap*, const char*, int, const _ns1__getAlarmResponse *, const char*);
SOAP_FMAC3 _ns1__getAlarmResponse * SOAP_FMAC4 soap_in__ns1__getAlarmResponse(struct soap*, const char*, _ns1__getAlarmResponse *, const char*);

#ifndef soap_write__ns1__getAlarmResponse
#define soap_write__ns1__getAlarmResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:getAlarmResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__getAlarmResponse * SOAP_FMAC4 soap_get__ns1__getAlarmResponse(struct soap*, _ns1__getAlarmResponse *, const char*, const char*);

#ifndef soap_read__ns1__getAlarmResponse
#define soap_read__ns1__getAlarmResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__getAlarmResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__getAlarmResponse * SOAP_FMAC2 soap_instantiate__ns1__getAlarmResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getAlarmResponse * soap_new__ns1__getAlarmResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__getAlarmResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__getAlarmResponse * soap_new_req__ns1__getAlarmResponse(struct soap *soap, std::string *out) { _ns1__getAlarmResponse *_p = soap_instantiate__ns1__getAlarmResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__getAlarmResponse::out = out; } return _p; }

inline _ns1__getAlarmResponse * soap_new_set__ns1__getAlarmResponse(struct soap *soap, std::string *out) { _ns1__getAlarmResponse *_p = soap_instantiate__ns1__getAlarmResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__getAlarmResponse::out = out; } return _p; }

inline void soap_delete__ns1__getAlarmResponse(struct soap *soap, _ns1__getAlarmResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getAlarmResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__getAlarm
#define SOAP_TYPE__ns1__getAlarm (36)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getAlarm(struct soap*, const char*, int, const _ns1__getAlarm *, const char*);
SOAP_FMAC3 _ns1__getAlarm * SOAP_FMAC4 soap_in__ns1__getAlarm(struct soap*, const char*, _ns1__getAlarm *, const char*);

#ifndef soap_write__ns1__getAlarm
#define soap_write__ns1__getAlarm(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:getAlarm", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__getAlarm * SOAP_FMAC4 soap_get__ns1__getAlarm(struct soap*, _ns1__getAlarm *, const char*, const char*);

#ifndef soap_read__ns1__getAlarm
#define soap_read__ns1__getAlarm(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__getAlarm(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__getAlarm * SOAP_FMAC2 soap_instantiate__ns1__getAlarm(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getAlarm * soap_new__ns1__getAlarm(struct soap *soap, int n = -1) { return soap_instantiate__ns1__getAlarm(soap, n, NULL, NULL, NULL); }

inline _ns1__getAlarm * soap_new_req__ns1__getAlarm(struct soap *soap, std::string *in0) { _ns1__getAlarm *_p = soap_instantiate__ns1__getAlarm(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__getAlarm::in0 = in0; } return _p; }

inline _ns1__getAlarm * soap_new_set__ns1__getAlarm(struct soap *soap, std::string *in0) { _ns1__getAlarm *_p = soap_instantiate__ns1__getAlarm(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__getAlarm::in0 = in0; } return _p; }

inline void soap_delete__ns1__getAlarm(struct soap *soap, _ns1__getAlarm *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getAlarm(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__upBoxInputPileDetResponse
#define SOAP_TYPE__ns1__upBoxInputPileDetResponse (35)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__upBoxInputPileDetResponse(struct soap*, const char*, int, const _ns1__upBoxInputPileDetResponse *, const char*);
SOAP_FMAC3 _ns1__upBoxInputPileDetResponse * SOAP_FMAC4 soap_in__ns1__upBoxInputPileDetResponse(struct soap*, const char*, _ns1__upBoxInputPileDetResponse *, const char*);

#ifndef soap_write__ns1__upBoxInputPileDetResponse
#define soap_write__ns1__upBoxInputPileDetResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:upBoxInputPileDetResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__upBoxInputPileDetResponse * SOAP_FMAC4 soap_get__ns1__upBoxInputPileDetResponse(struct soap*, _ns1__upBoxInputPileDetResponse *, const char*, const char*);

#ifndef soap_read__ns1__upBoxInputPileDetResponse
#define soap_read__ns1__upBoxInputPileDetResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__upBoxInputPileDetResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__upBoxInputPileDetResponse * SOAP_FMAC2 soap_instantiate__ns1__upBoxInputPileDetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__upBoxInputPileDetResponse * soap_new__ns1__upBoxInputPileDetResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__upBoxInputPileDetResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__upBoxInputPileDetResponse * soap_new_req__ns1__upBoxInputPileDetResponse(struct soap *soap, std::string *out) { _ns1__upBoxInputPileDetResponse *_p = soap_instantiate__ns1__upBoxInputPileDetResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__upBoxInputPileDetResponse::out = out; } return _p; }

inline _ns1__upBoxInputPileDetResponse * soap_new_set__ns1__upBoxInputPileDetResponse(struct soap *soap, std::string *out) { _ns1__upBoxInputPileDetResponse *_p = soap_instantiate__ns1__upBoxInputPileDetResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__upBoxInputPileDetResponse::out = out; } return _p; }

inline void soap_delete__ns1__upBoxInputPileDetResponse(struct soap *soap, _ns1__upBoxInputPileDetResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__upBoxInputPileDetResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__upBoxInputPileDet
#define SOAP_TYPE__ns1__upBoxInputPileDet (34)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__upBoxInputPileDet(struct soap*, const char*, int, const _ns1__upBoxInputPileDet *, const char*);
SOAP_FMAC3 _ns1__upBoxInputPileDet * SOAP_FMAC4 soap_in__ns1__upBoxInputPileDet(struct soap*, const char*, _ns1__upBoxInputPileDet *, const char*);

#ifndef soap_write__ns1__upBoxInputPileDet
#define soap_write__ns1__upBoxInputPileDet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:upBoxInputPileDet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__upBoxInputPileDet * SOAP_FMAC4 soap_get__ns1__upBoxInputPileDet(struct soap*, _ns1__upBoxInputPileDet *, const char*, const char*);

#ifndef soap_read__ns1__upBoxInputPileDet
#define soap_read__ns1__upBoxInputPileDet(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__upBoxInputPileDet(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__upBoxInputPileDet * SOAP_FMAC2 soap_instantiate__ns1__upBoxInputPileDet(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__upBoxInputPileDet * soap_new__ns1__upBoxInputPileDet(struct soap *soap, int n = -1) { return soap_instantiate__ns1__upBoxInputPileDet(soap, n, NULL, NULL, NULL); }

inline _ns1__upBoxInputPileDet * soap_new_req__ns1__upBoxInputPileDet(struct soap *soap, std::string *in0) { _ns1__upBoxInputPileDet *_p = soap_instantiate__ns1__upBoxInputPileDet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__upBoxInputPileDet::in0 = in0; } return _p; }

inline _ns1__upBoxInputPileDet * soap_new_set__ns1__upBoxInputPileDet(struct soap *soap, std::string *in0) { _ns1__upBoxInputPileDet *_p = soap_instantiate__ns1__upBoxInputPileDet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__upBoxInputPileDet::in0 = in0; } return _p; }

inline void soap_delete__ns1__upBoxInputPileDet(struct soap *soap, _ns1__upBoxInputPileDet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__upBoxInputPileDet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__boxCheckInfoResponse
#define SOAP_TYPE__ns1__boxCheckInfoResponse (33)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__boxCheckInfoResponse(struct soap*, const char*, int, const _ns1__boxCheckInfoResponse *, const char*);
SOAP_FMAC3 _ns1__boxCheckInfoResponse * SOAP_FMAC4 soap_in__ns1__boxCheckInfoResponse(struct soap*, const char*, _ns1__boxCheckInfoResponse *, const char*);

#ifndef soap_write__ns1__boxCheckInfoResponse
#define soap_write__ns1__boxCheckInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:boxCheckInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__boxCheckInfoResponse * SOAP_FMAC4 soap_get__ns1__boxCheckInfoResponse(struct soap*, _ns1__boxCheckInfoResponse *, const char*, const char*);

#ifndef soap_read__ns1__boxCheckInfoResponse
#define soap_read__ns1__boxCheckInfoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__boxCheckInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__boxCheckInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__boxCheckInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__boxCheckInfoResponse * soap_new__ns1__boxCheckInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__boxCheckInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__boxCheckInfoResponse * soap_new_req__ns1__boxCheckInfoResponse(struct soap *soap, std::string *out) { _ns1__boxCheckInfoResponse *_p = soap_instantiate__ns1__boxCheckInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__boxCheckInfoResponse::out = out; } return _p; }

inline _ns1__boxCheckInfoResponse * soap_new_set__ns1__boxCheckInfoResponse(struct soap *soap, std::string *out) { _ns1__boxCheckInfoResponse *_p = soap_instantiate__ns1__boxCheckInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__boxCheckInfoResponse::out = out; } return _p; }

inline void soap_delete__ns1__boxCheckInfoResponse(struct soap *soap, _ns1__boxCheckInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__boxCheckInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__boxCheckInfo
#define SOAP_TYPE__ns1__boxCheckInfo (32)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__boxCheckInfo(struct soap*, const char*, int, const _ns1__boxCheckInfo *, const char*);
SOAP_FMAC3 _ns1__boxCheckInfo * SOAP_FMAC4 soap_in__ns1__boxCheckInfo(struct soap*, const char*, _ns1__boxCheckInfo *, const char*);

#ifndef soap_write__ns1__boxCheckInfo
#define soap_write__ns1__boxCheckInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:boxCheckInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__boxCheckInfo * SOAP_FMAC4 soap_get__ns1__boxCheckInfo(struct soap*, _ns1__boxCheckInfo *, const char*, const char*);

#ifndef soap_read__ns1__boxCheckInfo
#define soap_read__ns1__boxCheckInfo(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__boxCheckInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__boxCheckInfo * SOAP_FMAC2 soap_instantiate__ns1__boxCheckInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__boxCheckInfo * soap_new__ns1__boxCheckInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns1__boxCheckInfo(soap, n, NULL, NULL, NULL); }

inline _ns1__boxCheckInfo * soap_new_req__ns1__boxCheckInfo(struct soap *soap, std::string *in0) { _ns1__boxCheckInfo *_p = soap_instantiate__ns1__boxCheckInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__boxCheckInfo::in0 = in0; } return _p; }

inline _ns1__boxCheckInfo * soap_new_set__ns1__boxCheckInfo(struct soap *soap, std::string *in0) { _ns1__boxCheckInfo *_p = soap_instantiate__ns1__boxCheckInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__boxCheckInfo::in0 = in0; } return _p; }

inline void soap_delete__ns1__boxCheckInfo(struct soap *soap, _ns1__boxCheckInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__boxCheckInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__equipCheckInfoResponse
#define SOAP_TYPE__ns1__equipCheckInfoResponse (31)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__equipCheckInfoResponse(struct soap*, const char*, int, const _ns1__equipCheckInfoResponse *, const char*);
SOAP_FMAC3 _ns1__equipCheckInfoResponse * SOAP_FMAC4 soap_in__ns1__equipCheckInfoResponse(struct soap*, const char*, _ns1__equipCheckInfoResponse *, const char*);

#ifndef soap_write__ns1__equipCheckInfoResponse
#define soap_write__ns1__equipCheckInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:equipCheckInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__equipCheckInfoResponse * SOAP_FMAC4 soap_get__ns1__equipCheckInfoResponse(struct soap*, _ns1__equipCheckInfoResponse *, const char*, const char*);

#ifndef soap_read__ns1__equipCheckInfoResponse
#define soap_read__ns1__equipCheckInfoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__equipCheckInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__equipCheckInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__equipCheckInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__equipCheckInfoResponse * soap_new__ns1__equipCheckInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__equipCheckInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__equipCheckInfoResponse * soap_new_req__ns1__equipCheckInfoResponse(struct soap *soap, std::string *out) { _ns1__equipCheckInfoResponse *_p = soap_instantiate__ns1__equipCheckInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__equipCheckInfoResponse::out = out; } return _p; }

inline _ns1__equipCheckInfoResponse * soap_new_set__ns1__equipCheckInfoResponse(struct soap *soap, std::string *out) { _ns1__equipCheckInfoResponse *_p = soap_instantiate__ns1__equipCheckInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__equipCheckInfoResponse::out = out; } return _p; }

inline void soap_delete__ns1__equipCheckInfoResponse(struct soap *soap, _ns1__equipCheckInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__equipCheckInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__equipCheckInfo
#define SOAP_TYPE__ns1__equipCheckInfo (30)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__equipCheckInfo(struct soap*, const char*, int, const _ns1__equipCheckInfo *, const char*);
SOAP_FMAC3 _ns1__equipCheckInfo * SOAP_FMAC4 soap_in__ns1__equipCheckInfo(struct soap*, const char*, _ns1__equipCheckInfo *, const char*);

#ifndef soap_write__ns1__equipCheckInfo
#define soap_write__ns1__equipCheckInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:equipCheckInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__equipCheckInfo * SOAP_FMAC4 soap_get__ns1__equipCheckInfo(struct soap*, _ns1__equipCheckInfo *, const char*, const char*);

#ifndef soap_read__ns1__equipCheckInfo
#define soap_read__ns1__equipCheckInfo(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__equipCheckInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__equipCheckInfo * SOAP_FMAC2 soap_instantiate__ns1__equipCheckInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__equipCheckInfo * soap_new__ns1__equipCheckInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns1__equipCheckInfo(soap, n, NULL, NULL, NULL); }

inline _ns1__equipCheckInfo * soap_new_req__ns1__equipCheckInfo(struct soap *soap, std::string *in0) { _ns1__equipCheckInfo *_p = soap_instantiate__ns1__equipCheckInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__equipCheckInfo::in0 = in0; } return _p; }

inline _ns1__equipCheckInfo * soap_new_set__ns1__equipCheckInfo(struct soap *soap, std::string *in0) { _ns1__equipCheckInfo *_p = soap_instantiate__ns1__equipCheckInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__equipCheckInfo::in0 = in0; } return _p; }

inline void soap_delete__ns1__equipCheckInfo(struct soap *soap, _ns1__equipCheckInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__equipCheckInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__getDBConnInfoResponse
#define SOAP_TYPE__ns1__getDBConnInfoResponse (29)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getDBConnInfoResponse(struct soap*, const char*, int, const _ns1__getDBConnInfoResponse *, const char*);
SOAP_FMAC3 _ns1__getDBConnInfoResponse * SOAP_FMAC4 soap_in__ns1__getDBConnInfoResponse(struct soap*, const char*, _ns1__getDBConnInfoResponse *, const char*);

#ifndef soap_write__ns1__getDBConnInfoResponse
#define soap_write__ns1__getDBConnInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:getDBConnInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__getDBConnInfoResponse * SOAP_FMAC4 soap_get__ns1__getDBConnInfoResponse(struct soap*, _ns1__getDBConnInfoResponse *, const char*, const char*);

#ifndef soap_read__ns1__getDBConnInfoResponse
#define soap_read__ns1__getDBConnInfoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__getDBConnInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__getDBConnInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__getDBConnInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getDBConnInfoResponse * soap_new__ns1__getDBConnInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__getDBConnInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__getDBConnInfoResponse * soap_new_req__ns1__getDBConnInfoResponse(struct soap *soap, std::string *out) { _ns1__getDBConnInfoResponse *_p = soap_instantiate__ns1__getDBConnInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__getDBConnInfoResponse::out = out; } return _p; }

inline _ns1__getDBConnInfoResponse * soap_new_set__ns1__getDBConnInfoResponse(struct soap *soap, std::string *out) { _ns1__getDBConnInfoResponse *_p = soap_instantiate__ns1__getDBConnInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__getDBConnInfoResponse::out = out; } return _p; }

inline void soap_delete__ns1__getDBConnInfoResponse(struct soap *soap, _ns1__getDBConnInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getDBConnInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__getDBConnInfo
#define SOAP_TYPE__ns1__getDBConnInfo (28)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getDBConnInfo(struct soap*, const char*, int, const _ns1__getDBConnInfo *, const char*);
SOAP_FMAC3 _ns1__getDBConnInfo * SOAP_FMAC4 soap_in__ns1__getDBConnInfo(struct soap*, const char*, _ns1__getDBConnInfo *, const char*);

#ifndef soap_write__ns1__getDBConnInfo
#define soap_write__ns1__getDBConnInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:getDBConnInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__getDBConnInfo * SOAP_FMAC4 soap_get__ns1__getDBConnInfo(struct soap*, _ns1__getDBConnInfo *, const char*, const char*);

#ifndef soap_read__ns1__getDBConnInfo
#define soap_read__ns1__getDBConnInfo(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__getDBConnInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__getDBConnInfo * SOAP_FMAC2 soap_instantiate__ns1__getDBConnInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getDBConnInfo * soap_new__ns1__getDBConnInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns1__getDBConnInfo(soap, n, NULL, NULL, NULL); }

inline _ns1__getDBConnInfo * soap_new_req__ns1__getDBConnInfo(struct soap *soap) { _ns1__getDBConnInfo *_p = soap_instantiate__ns1__getDBConnInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__getDBConnInfo * soap_new_set__ns1__getDBConnInfo(struct soap *soap) { _ns1__getDBConnInfo *_p = soap_instantiate__ns1__getDBConnInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__getDBConnInfo(struct soap *soap, _ns1__getDBConnInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getDBConnInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__applyEquipResponse
#define SOAP_TYPE__ns1__applyEquipResponse (27)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__applyEquipResponse(struct soap*, const char*, int, const _ns1__applyEquipResponse *, const char*);
SOAP_FMAC3 _ns1__applyEquipResponse * SOAP_FMAC4 soap_in__ns1__applyEquipResponse(struct soap*, const char*, _ns1__applyEquipResponse *, const char*);

#ifndef soap_write__ns1__applyEquipResponse
#define soap_write__ns1__applyEquipResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:applyEquipResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__applyEquipResponse * SOAP_FMAC4 soap_get__ns1__applyEquipResponse(struct soap*, _ns1__applyEquipResponse *, const char*, const char*);

#ifndef soap_read__ns1__applyEquipResponse
#define soap_read__ns1__applyEquipResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__applyEquipResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__applyEquipResponse * SOAP_FMAC2 soap_instantiate__ns1__applyEquipResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__applyEquipResponse * soap_new__ns1__applyEquipResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__applyEquipResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__applyEquipResponse * soap_new_req__ns1__applyEquipResponse(struct soap *soap, std::string *out) { _ns1__applyEquipResponse *_p = soap_instantiate__ns1__applyEquipResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__applyEquipResponse::out = out; } return _p; }

inline _ns1__applyEquipResponse * soap_new_set__ns1__applyEquipResponse(struct soap *soap, std::string *out) { _ns1__applyEquipResponse *_p = soap_instantiate__ns1__applyEquipResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__applyEquipResponse::out = out; } return _p; }

inline void soap_delete__ns1__applyEquipResponse(struct soap *soap, _ns1__applyEquipResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__applyEquipResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__applyEquip
#define SOAP_TYPE__ns1__applyEquip (26)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__applyEquip(struct soap*, const char*, int, const _ns1__applyEquip *, const char*);
SOAP_FMAC3 _ns1__applyEquip * SOAP_FMAC4 soap_in__ns1__applyEquip(struct soap*, const char*, _ns1__applyEquip *, const char*);

#ifndef soap_write__ns1__applyEquip
#define soap_write__ns1__applyEquip(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:applyEquip", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__applyEquip * SOAP_FMAC4 soap_get__ns1__applyEquip(struct soap*, _ns1__applyEquip *, const char*, const char*);

#ifndef soap_read__ns1__applyEquip
#define soap_read__ns1__applyEquip(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__applyEquip(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__applyEquip * SOAP_FMAC2 soap_instantiate__ns1__applyEquip(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__applyEquip * soap_new__ns1__applyEquip(struct soap *soap, int n = -1) { return soap_instantiate__ns1__applyEquip(soap, n, NULL, NULL, NULL); }

inline _ns1__applyEquip * soap_new_req__ns1__applyEquip(struct soap *soap, std::string *in0) { _ns1__applyEquip *_p = soap_instantiate__ns1__applyEquip(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__applyEquip::in0 = in0; } return _p; }

inline _ns1__applyEquip * soap_new_set__ns1__applyEquip(struct soap *soap, std::string *in0) { _ns1__applyEquip *_p = soap_instantiate__ns1__applyEquip(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__applyEquip::in0 = in0; } return _p; }

inline void soap_delete__ns1__applyEquip(struct soap *soap, _ns1__applyEquip *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__applyEquip(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__getMachineHandInfoResponse
#define SOAP_TYPE__ns1__getMachineHandInfoResponse (25)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getMachineHandInfoResponse(struct soap*, const char*, int, const _ns1__getMachineHandInfoResponse *, const char*);
SOAP_FMAC3 _ns1__getMachineHandInfoResponse * SOAP_FMAC4 soap_in__ns1__getMachineHandInfoResponse(struct soap*, const char*, _ns1__getMachineHandInfoResponse *, const char*);

#ifndef soap_write__ns1__getMachineHandInfoResponse
#define soap_write__ns1__getMachineHandInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:getMachineHandInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__getMachineHandInfoResponse * SOAP_FMAC4 soap_get__ns1__getMachineHandInfoResponse(struct soap*, _ns1__getMachineHandInfoResponse *, const char*, const char*);

#ifndef soap_read__ns1__getMachineHandInfoResponse
#define soap_read__ns1__getMachineHandInfoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__getMachineHandInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__getMachineHandInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__getMachineHandInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getMachineHandInfoResponse * soap_new__ns1__getMachineHandInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__getMachineHandInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__getMachineHandInfoResponse * soap_new_req__ns1__getMachineHandInfoResponse(struct soap *soap, std::string *out) { _ns1__getMachineHandInfoResponse *_p = soap_instantiate__ns1__getMachineHandInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__getMachineHandInfoResponse::out = out; } return _p; }

inline _ns1__getMachineHandInfoResponse * soap_new_set__ns1__getMachineHandInfoResponse(struct soap *soap, std::string *out) { _ns1__getMachineHandInfoResponse *_p = soap_instantiate__ns1__getMachineHandInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__getMachineHandInfoResponse::out = out; } return _p; }

inline void soap_delete__ns1__getMachineHandInfoResponse(struct soap *soap, _ns1__getMachineHandInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getMachineHandInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__getMachineHandInfo
#define SOAP_TYPE__ns1__getMachineHandInfo (24)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getMachineHandInfo(struct soap*, const char*, int, const _ns1__getMachineHandInfo *, const char*);
SOAP_FMAC3 _ns1__getMachineHandInfo * SOAP_FMAC4 soap_in__ns1__getMachineHandInfo(struct soap*, const char*, _ns1__getMachineHandInfo *, const char*);

#ifndef soap_write__ns1__getMachineHandInfo
#define soap_write__ns1__getMachineHandInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:getMachineHandInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__getMachineHandInfo * SOAP_FMAC4 soap_get__ns1__getMachineHandInfo(struct soap*, _ns1__getMachineHandInfo *, const char*, const char*);

#ifndef soap_read__ns1__getMachineHandInfo
#define soap_read__ns1__getMachineHandInfo(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__getMachineHandInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__getMachineHandInfo * SOAP_FMAC2 soap_instantiate__ns1__getMachineHandInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getMachineHandInfo * soap_new__ns1__getMachineHandInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns1__getMachineHandInfo(soap, n, NULL, NULL, NULL); }

inline _ns1__getMachineHandInfo * soap_new_req__ns1__getMachineHandInfo(struct soap *soap, std::string *in0) { _ns1__getMachineHandInfo *_p = soap_instantiate__ns1__getMachineHandInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__getMachineHandInfo::in0 = in0; } return _p; }

inline _ns1__getMachineHandInfo * soap_new_set__ns1__getMachineHandInfo(struct soap *soap, std::string *in0) { _ns1__getMachineHandInfo *_p = soap_instantiate__ns1__getMachineHandInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__getMachineHandInfo::in0 = in0; } return _p; }

inline void soap_delete__ns1__getMachineHandInfo(struct soap *soap, _ns1__getMachineHandInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getMachineHandInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__setResultsResponse
#define SOAP_TYPE__ns1__setResultsResponse (23)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setResultsResponse(struct soap*, const char*, int, const _ns1__setResultsResponse *, const char*);
SOAP_FMAC3 _ns1__setResultsResponse * SOAP_FMAC4 soap_in__ns1__setResultsResponse(struct soap*, const char*, _ns1__setResultsResponse *, const char*);

#ifndef soap_write__ns1__setResultsResponse
#define soap_write__ns1__setResultsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:setResultsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__setResultsResponse * SOAP_FMAC4 soap_get__ns1__setResultsResponse(struct soap*, _ns1__setResultsResponse *, const char*, const char*);

#ifndef soap_read__ns1__setResultsResponse
#define soap_read__ns1__setResultsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__setResultsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__setResultsResponse * SOAP_FMAC2 soap_instantiate__ns1__setResultsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__setResultsResponse * soap_new__ns1__setResultsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__setResultsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__setResultsResponse * soap_new_req__ns1__setResultsResponse(struct soap *soap, std::string *out) { _ns1__setResultsResponse *_p = soap_instantiate__ns1__setResultsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__setResultsResponse::out = out; } return _p; }

inline _ns1__setResultsResponse * soap_new_set__ns1__setResultsResponse(struct soap *soap, std::string *out) { _ns1__setResultsResponse *_p = soap_instantiate__ns1__setResultsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__setResultsResponse::out = out; } return _p; }

inline void soap_delete__ns1__setResultsResponse(struct soap *soap, _ns1__setResultsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__setResultsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__setResults
#define SOAP_TYPE__ns1__setResults (22)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setResults(struct soap*, const char*, int, const _ns1__setResults *, const char*);
SOAP_FMAC3 _ns1__setResults * SOAP_FMAC4 soap_in__ns1__setResults(struct soap*, const char*, _ns1__setResults *, const char*);

#ifndef soap_write__ns1__setResults
#define soap_write__ns1__setResults(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:setResults", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__setResults * SOAP_FMAC4 soap_get__ns1__setResults(struct soap*, _ns1__setResults *, const char*, const char*);

#ifndef soap_read__ns1__setResults
#define soap_read__ns1__setResults(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__setResults(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__setResults * SOAP_FMAC2 soap_instantiate__ns1__setResults(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__setResults * soap_new__ns1__setResults(struct soap *soap, int n = -1) { return soap_instantiate__ns1__setResults(soap, n, NULL, NULL, NULL); }

inline _ns1__setResults * soap_new_req__ns1__setResults(struct soap *soap, std::string *in0) { _ns1__setResults *_p = soap_instantiate__ns1__setResults(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__setResults::in0 = in0; } return _p; }

inline _ns1__setResults * soap_new_set__ns1__setResults(struct soap *soap, std::string *in0) { _ns1__setResults *_p = soap_instantiate__ns1__setResults(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__setResults::in0 = in0; } return _p; }

inline void soap_delete__ns1__setResults(struct soap *soap, _ns1__setResults *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__setResults(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__getDETedTestDataResponse
#define SOAP_TYPE__ns1__getDETedTestDataResponse (21)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getDETedTestDataResponse(struct soap*, const char*, int, const _ns1__getDETedTestDataResponse *, const char*);
SOAP_FMAC3 _ns1__getDETedTestDataResponse * SOAP_FMAC4 soap_in__ns1__getDETedTestDataResponse(struct soap*, const char*, _ns1__getDETedTestDataResponse *, const char*);

#ifndef soap_write__ns1__getDETedTestDataResponse
#define soap_write__ns1__getDETedTestDataResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:getDETedTestDataResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__getDETedTestDataResponse * SOAP_FMAC4 soap_get__ns1__getDETedTestDataResponse(struct soap*, _ns1__getDETedTestDataResponse *, const char*, const char*);

#ifndef soap_read__ns1__getDETedTestDataResponse
#define soap_read__ns1__getDETedTestDataResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__getDETedTestDataResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__getDETedTestDataResponse * SOAP_FMAC2 soap_instantiate__ns1__getDETedTestDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getDETedTestDataResponse * soap_new__ns1__getDETedTestDataResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__getDETedTestDataResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__getDETedTestDataResponse * soap_new_req__ns1__getDETedTestDataResponse(struct soap *soap, std::string *out) { _ns1__getDETedTestDataResponse *_p = soap_instantiate__ns1__getDETedTestDataResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__getDETedTestDataResponse::out = out; } return _p; }

inline _ns1__getDETedTestDataResponse * soap_new_set__ns1__getDETedTestDataResponse(struct soap *soap, std::string *out) { _ns1__getDETedTestDataResponse *_p = soap_instantiate__ns1__getDETedTestDataResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__getDETedTestDataResponse::out = out; } return _p; }

inline void soap_delete__ns1__getDETedTestDataResponse(struct soap *soap, _ns1__getDETedTestDataResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getDETedTestDataResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__getDETedTestData
#define SOAP_TYPE__ns1__getDETedTestData (20)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getDETedTestData(struct soap*, const char*, int, const _ns1__getDETedTestData *, const char*);
SOAP_FMAC3 _ns1__getDETedTestData * SOAP_FMAC4 soap_in__ns1__getDETedTestData(struct soap*, const char*, _ns1__getDETedTestData *, const char*);

#ifndef soap_write__ns1__getDETedTestData
#define soap_write__ns1__getDETedTestData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:getDETedTestData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__getDETedTestData * SOAP_FMAC4 soap_get__ns1__getDETedTestData(struct soap*, _ns1__getDETedTestData *, const char*, const char*);

#ifndef soap_read__ns1__getDETedTestData
#define soap_read__ns1__getDETedTestData(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__getDETedTestData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__getDETedTestData * SOAP_FMAC2 soap_instantiate__ns1__getDETedTestData(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getDETedTestData * soap_new__ns1__getDETedTestData(struct soap *soap, int n = -1) { return soap_instantiate__ns1__getDETedTestData(soap, n, NULL, NULL, NULL); }

inline _ns1__getDETedTestData * soap_new_req__ns1__getDETedTestData(struct soap *soap, std::string *in0) { _ns1__getDETedTestData *_p = soap_instantiate__ns1__getDETedTestData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__getDETedTestData::in0 = in0; } return _p; }

inline _ns1__getDETedTestData * soap_new_set__ns1__getDETedTestData(struct soap *soap, std::string *in0) { _ns1__getDETedTestData *_p = soap_instantiate__ns1__getDETedTestData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__getDETedTestData::in0 = in0; } return _p; }

inline void soap_delete__ns1__getDETedTestData(struct soap *soap, _ns1__getDETedTestData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getDETedTestData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__applyAssistEquipResponse
#define SOAP_TYPE__ns1__applyAssistEquipResponse (19)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__applyAssistEquipResponse(struct soap*, const char*, int, const _ns1__applyAssistEquipResponse *, const char*);
SOAP_FMAC3 _ns1__applyAssistEquipResponse * SOAP_FMAC4 soap_in__ns1__applyAssistEquipResponse(struct soap*, const char*, _ns1__applyAssistEquipResponse *, const char*);

#ifndef soap_write__ns1__applyAssistEquipResponse
#define soap_write__ns1__applyAssistEquipResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:applyAssistEquipResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__applyAssistEquipResponse * SOAP_FMAC4 soap_get__ns1__applyAssistEquipResponse(struct soap*, _ns1__applyAssistEquipResponse *, const char*, const char*);

#ifndef soap_read__ns1__applyAssistEquipResponse
#define soap_read__ns1__applyAssistEquipResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__applyAssistEquipResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__applyAssistEquipResponse * SOAP_FMAC2 soap_instantiate__ns1__applyAssistEquipResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__applyAssistEquipResponse * soap_new__ns1__applyAssistEquipResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__applyAssistEquipResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__applyAssistEquipResponse * soap_new_req__ns1__applyAssistEquipResponse(struct soap *soap, std::string *out) { _ns1__applyAssistEquipResponse *_p = soap_instantiate__ns1__applyAssistEquipResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__applyAssistEquipResponse::out = out; } return _p; }

inline _ns1__applyAssistEquipResponse * soap_new_set__ns1__applyAssistEquipResponse(struct soap *soap, std::string *out) { _ns1__applyAssistEquipResponse *_p = soap_instantiate__ns1__applyAssistEquipResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__applyAssistEquipResponse::out = out; } return _p; }

inline void soap_delete__ns1__applyAssistEquipResponse(struct soap *soap, _ns1__applyAssistEquipResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__applyAssistEquipResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__applyAssistEquip
#define SOAP_TYPE__ns1__applyAssistEquip (18)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__applyAssistEquip(struct soap*, const char*, int, const _ns1__applyAssistEquip *, const char*);
SOAP_FMAC3 _ns1__applyAssistEquip * SOAP_FMAC4 soap_in__ns1__applyAssistEquip(struct soap*, const char*, _ns1__applyAssistEquip *, const char*);

#ifndef soap_write__ns1__applyAssistEquip
#define soap_write__ns1__applyAssistEquip(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:applyAssistEquip", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__applyAssistEquip * SOAP_FMAC4 soap_get__ns1__applyAssistEquip(struct soap*, _ns1__applyAssistEquip *, const char*, const char*);

#ifndef soap_read__ns1__applyAssistEquip
#define soap_read__ns1__applyAssistEquip(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__applyAssistEquip(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__applyAssistEquip * SOAP_FMAC2 soap_instantiate__ns1__applyAssistEquip(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__applyAssistEquip * soap_new__ns1__applyAssistEquip(struct soap *soap, int n = -1) { return soap_instantiate__ns1__applyAssistEquip(soap, n, NULL, NULL, NULL); }

inline _ns1__applyAssistEquip * soap_new_req__ns1__applyAssistEquip(struct soap *soap, std::string *in0) { _ns1__applyAssistEquip *_p = soap_instantiate__ns1__applyAssistEquip(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__applyAssistEquip::in0 = in0; } return _p; }

inline _ns1__applyAssistEquip * soap_new_set__ns1__applyAssistEquip(struct soap *soap, std::string *in0) { _ns1__applyAssistEquip *_p = soap_instantiate__ns1__applyAssistEquip(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__applyAssistEquip::in0 = in0; } return _p; }

inline void soap_delete__ns1__applyAssistEquip(struct soap *soap, _ns1__applyAssistEquip *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__applyAssistEquip(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__sendTaskFinishFlagResponse
#define SOAP_TYPE__ns1__sendTaskFinishFlagResponse (17)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__sendTaskFinishFlagResponse(struct soap*, const char*, int, const _ns1__sendTaskFinishFlagResponse *, const char*);
SOAP_FMAC3 _ns1__sendTaskFinishFlagResponse * SOAP_FMAC4 soap_in__ns1__sendTaskFinishFlagResponse(struct soap*, const char*, _ns1__sendTaskFinishFlagResponse *, const char*);

#ifndef soap_write__ns1__sendTaskFinishFlagResponse
#define soap_write__ns1__sendTaskFinishFlagResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:sendTaskFinishFlagResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__sendTaskFinishFlagResponse * SOAP_FMAC4 soap_get__ns1__sendTaskFinishFlagResponse(struct soap*, _ns1__sendTaskFinishFlagResponse *, const char*, const char*);

#ifndef soap_read__ns1__sendTaskFinishFlagResponse
#define soap_read__ns1__sendTaskFinishFlagResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__sendTaskFinishFlagResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__sendTaskFinishFlagResponse * SOAP_FMAC2 soap_instantiate__ns1__sendTaskFinishFlagResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__sendTaskFinishFlagResponse * soap_new__ns1__sendTaskFinishFlagResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__sendTaskFinishFlagResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__sendTaskFinishFlagResponse * soap_new_req__ns1__sendTaskFinishFlagResponse(struct soap *soap, std::string *out) { _ns1__sendTaskFinishFlagResponse *_p = soap_instantiate__ns1__sendTaskFinishFlagResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__sendTaskFinishFlagResponse::out = out; } return _p; }

inline _ns1__sendTaskFinishFlagResponse * soap_new_set__ns1__sendTaskFinishFlagResponse(struct soap *soap, std::string *out) { _ns1__sendTaskFinishFlagResponse *_p = soap_instantiate__ns1__sendTaskFinishFlagResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__sendTaskFinishFlagResponse::out = out; } return _p; }

inline void soap_delete__ns1__sendTaskFinishFlagResponse(struct soap *soap, _ns1__sendTaskFinishFlagResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__sendTaskFinishFlagResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__sendTaskFinishFlag
#define SOAP_TYPE__ns1__sendTaskFinishFlag (16)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__sendTaskFinishFlag(struct soap*, const char*, int, const _ns1__sendTaskFinishFlag *, const char*);
SOAP_FMAC3 _ns1__sendTaskFinishFlag * SOAP_FMAC4 soap_in__ns1__sendTaskFinishFlag(struct soap*, const char*, _ns1__sendTaskFinishFlag *, const char*);

#ifndef soap_write__ns1__sendTaskFinishFlag
#define soap_write__ns1__sendTaskFinishFlag(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:sendTaskFinishFlag", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__sendTaskFinishFlag * SOAP_FMAC4 soap_get__ns1__sendTaskFinishFlag(struct soap*, _ns1__sendTaskFinishFlag *, const char*, const char*);

#ifndef soap_read__ns1__sendTaskFinishFlag
#define soap_read__ns1__sendTaskFinishFlag(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__sendTaskFinishFlag(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__sendTaskFinishFlag * SOAP_FMAC2 soap_instantiate__ns1__sendTaskFinishFlag(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__sendTaskFinishFlag * soap_new__ns1__sendTaskFinishFlag(struct soap *soap, int n = -1) { return soap_instantiate__ns1__sendTaskFinishFlag(soap, n, NULL, NULL, NULL); }

inline _ns1__sendTaskFinishFlag * soap_new_req__ns1__sendTaskFinishFlag(struct soap *soap, std::string *in0) { _ns1__sendTaskFinishFlag *_p = soap_instantiate__ns1__sendTaskFinishFlag(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__sendTaskFinishFlag::in0 = in0; } return _p; }

inline _ns1__sendTaskFinishFlag * soap_new_set__ns1__sendTaskFinishFlag(struct soap *soap, std::string *in0) { _ns1__sendTaskFinishFlag *_p = soap_instantiate__ns1__sendTaskFinishFlag(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__sendTaskFinishFlag::in0 = in0; } return _p; }

inline void soap_delete__ns1__sendTaskFinishFlag(struct soap *soap, _ns1__sendTaskFinishFlag *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__sendTaskFinishFlag(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__uploadSealsCodeResponse
#define SOAP_TYPE__ns1__uploadSealsCodeResponse (15)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__uploadSealsCodeResponse(struct soap*, const char*, int, const _ns1__uploadSealsCodeResponse *, const char*);
SOAP_FMAC3 _ns1__uploadSealsCodeResponse * SOAP_FMAC4 soap_in__ns1__uploadSealsCodeResponse(struct soap*, const char*, _ns1__uploadSealsCodeResponse *, const char*);

#ifndef soap_write__ns1__uploadSealsCodeResponse
#define soap_write__ns1__uploadSealsCodeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:uploadSealsCodeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__uploadSealsCodeResponse * SOAP_FMAC4 soap_get__ns1__uploadSealsCodeResponse(struct soap*, _ns1__uploadSealsCodeResponse *, const char*, const char*);

#ifndef soap_read__ns1__uploadSealsCodeResponse
#define soap_read__ns1__uploadSealsCodeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__uploadSealsCodeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__uploadSealsCodeResponse * SOAP_FMAC2 soap_instantiate__ns1__uploadSealsCodeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__uploadSealsCodeResponse * soap_new__ns1__uploadSealsCodeResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__uploadSealsCodeResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__uploadSealsCodeResponse * soap_new_req__ns1__uploadSealsCodeResponse(struct soap *soap, std::string *out) { _ns1__uploadSealsCodeResponse *_p = soap_instantiate__ns1__uploadSealsCodeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__uploadSealsCodeResponse::out = out; } return _p; }

inline _ns1__uploadSealsCodeResponse * soap_new_set__ns1__uploadSealsCodeResponse(struct soap *soap, std::string *out) { _ns1__uploadSealsCodeResponse *_p = soap_instantiate__ns1__uploadSealsCodeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__uploadSealsCodeResponse::out = out; } return _p; }

inline void soap_delete__ns1__uploadSealsCodeResponse(struct soap *soap, _ns1__uploadSealsCodeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__uploadSealsCodeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__uploadSealsCode
#define SOAP_TYPE__ns1__uploadSealsCode (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__uploadSealsCode(struct soap*, const char*, int, const _ns1__uploadSealsCode *, const char*);
SOAP_FMAC3 _ns1__uploadSealsCode * SOAP_FMAC4 soap_in__ns1__uploadSealsCode(struct soap*, const char*, _ns1__uploadSealsCode *, const char*);

#ifndef soap_write__ns1__uploadSealsCode
#define soap_write__ns1__uploadSealsCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:uploadSealsCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__uploadSealsCode * SOAP_FMAC4 soap_get__ns1__uploadSealsCode(struct soap*, _ns1__uploadSealsCode *, const char*, const char*);

#ifndef soap_read__ns1__uploadSealsCode
#define soap_read__ns1__uploadSealsCode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__uploadSealsCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__uploadSealsCode * SOAP_FMAC2 soap_instantiate__ns1__uploadSealsCode(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__uploadSealsCode * soap_new__ns1__uploadSealsCode(struct soap *soap, int n = -1) { return soap_instantiate__ns1__uploadSealsCode(soap, n, NULL, NULL, NULL); }

inline _ns1__uploadSealsCode * soap_new_req__ns1__uploadSealsCode(struct soap *soap, std::string *in0) { _ns1__uploadSealsCode *_p = soap_instantiate__ns1__uploadSealsCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__uploadSealsCode::in0 = in0; } return _p; }

inline _ns1__uploadSealsCode * soap_new_set__ns1__uploadSealsCode(struct soap *soap, std::string *in0) { _ns1__uploadSealsCode *_p = soap_instantiate__ns1__uploadSealsCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__uploadSealsCode::in0 = in0; } return _p; }

inline void soap_delete__ns1__uploadSealsCode(struct soap *soap, _ns1__uploadSealsCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__uploadSealsCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__sendCtrlTaskFinishFlagResponse
#define SOAP_TYPE__ns1__sendCtrlTaskFinishFlagResponse (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__sendCtrlTaskFinishFlagResponse(struct soap*, const char*, int, const _ns1__sendCtrlTaskFinishFlagResponse *, const char*);
SOAP_FMAC3 _ns1__sendCtrlTaskFinishFlagResponse * SOAP_FMAC4 soap_in__ns1__sendCtrlTaskFinishFlagResponse(struct soap*, const char*, _ns1__sendCtrlTaskFinishFlagResponse *, const char*);

#ifndef soap_write__ns1__sendCtrlTaskFinishFlagResponse
#define soap_write__ns1__sendCtrlTaskFinishFlagResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:sendCtrlTaskFinishFlagResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__sendCtrlTaskFinishFlagResponse * SOAP_FMAC4 soap_get__ns1__sendCtrlTaskFinishFlagResponse(struct soap*, _ns1__sendCtrlTaskFinishFlagResponse *, const char*, const char*);

#ifndef soap_read__ns1__sendCtrlTaskFinishFlagResponse
#define soap_read__ns1__sendCtrlTaskFinishFlagResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__sendCtrlTaskFinishFlagResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__sendCtrlTaskFinishFlagResponse * SOAP_FMAC2 soap_instantiate__ns1__sendCtrlTaskFinishFlagResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__sendCtrlTaskFinishFlagResponse * soap_new__ns1__sendCtrlTaskFinishFlagResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__sendCtrlTaskFinishFlagResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__sendCtrlTaskFinishFlagResponse * soap_new_req__ns1__sendCtrlTaskFinishFlagResponse(struct soap *soap, std::string *out) { _ns1__sendCtrlTaskFinishFlagResponse *_p = soap_instantiate__ns1__sendCtrlTaskFinishFlagResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__sendCtrlTaskFinishFlagResponse::out = out; } return _p; }

inline _ns1__sendCtrlTaskFinishFlagResponse * soap_new_set__ns1__sendCtrlTaskFinishFlagResponse(struct soap *soap, std::string *out) { _ns1__sendCtrlTaskFinishFlagResponse *_p = soap_instantiate__ns1__sendCtrlTaskFinishFlagResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__sendCtrlTaskFinishFlagResponse::out = out; } return _p; }

inline void soap_delete__ns1__sendCtrlTaskFinishFlagResponse(struct soap *soap, _ns1__sendCtrlTaskFinishFlagResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__sendCtrlTaskFinishFlagResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__sendCtrlTaskFinishFlag
#define SOAP_TYPE__ns1__sendCtrlTaskFinishFlag (12)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__sendCtrlTaskFinishFlag(struct soap*, const char*, int, const _ns1__sendCtrlTaskFinishFlag *, const char*);
SOAP_FMAC3 _ns1__sendCtrlTaskFinishFlag * SOAP_FMAC4 soap_in__ns1__sendCtrlTaskFinishFlag(struct soap*, const char*, _ns1__sendCtrlTaskFinishFlag *, const char*);

#ifndef soap_write__ns1__sendCtrlTaskFinishFlag
#define soap_write__ns1__sendCtrlTaskFinishFlag(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:sendCtrlTaskFinishFlag", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__sendCtrlTaskFinishFlag * SOAP_FMAC4 soap_get__ns1__sendCtrlTaskFinishFlag(struct soap*, _ns1__sendCtrlTaskFinishFlag *, const char*, const char*);

#ifndef soap_read__ns1__sendCtrlTaskFinishFlag
#define soap_read__ns1__sendCtrlTaskFinishFlag(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__sendCtrlTaskFinishFlag(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__sendCtrlTaskFinishFlag * SOAP_FMAC2 soap_instantiate__ns1__sendCtrlTaskFinishFlag(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__sendCtrlTaskFinishFlag * soap_new__ns1__sendCtrlTaskFinishFlag(struct soap *soap, int n = -1) { return soap_instantiate__ns1__sendCtrlTaskFinishFlag(soap, n, NULL, NULL, NULL); }

inline _ns1__sendCtrlTaskFinishFlag * soap_new_req__ns1__sendCtrlTaskFinishFlag(struct soap *soap, std::string *in0) { _ns1__sendCtrlTaskFinishFlag *_p = soap_instantiate__ns1__sendCtrlTaskFinishFlag(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__sendCtrlTaskFinishFlag::in0 = in0; } return _p; }

inline _ns1__sendCtrlTaskFinishFlag * soap_new_set__ns1__sendCtrlTaskFinishFlag(struct soap *soap, std::string *in0) { _ns1__sendCtrlTaskFinishFlag *_p = soap_instantiate__ns1__sendCtrlTaskFinishFlag(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__sendCtrlTaskFinishFlag::in0 = in0; } return _p; }

inline void soap_delete__ns1__sendCtrlTaskFinishFlag(struct soap *soap, _ns1__sendCtrlTaskFinishFlag *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__sendCtrlTaskFinishFlag(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__uploadLabelResponse
#define SOAP_TYPE__ns1__uploadLabelResponse (11)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__uploadLabelResponse(struct soap*, const char*, int, const _ns1__uploadLabelResponse *, const char*);
SOAP_FMAC3 _ns1__uploadLabelResponse * SOAP_FMAC4 soap_in__ns1__uploadLabelResponse(struct soap*, const char*, _ns1__uploadLabelResponse *, const char*);

#ifndef soap_write__ns1__uploadLabelResponse
#define soap_write__ns1__uploadLabelResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:uploadLabelResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__uploadLabelResponse * SOAP_FMAC4 soap_get__ns1__uploadLabelResponse(struct soap*, _ns1__uploadLabelResponse *, const char*, const char*);

#ifndef soap_read__ns1__uploadLabelResponse
#define soap_read__ns1__uploadLabelResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__uploadLabelResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__uploadLabelResponse * SOAP_FMAC2 soap_instantiate__ns1__uploadLabelResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__uploadLabelResponse * soap_new__ns1__uploadLabelResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__uploadLabelResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__uploadLabelResponse * soap_new_req__ns1__uploadLabelResponse(struct soap *soap, std::string *out) { _ns1__uploadLabelResponse *_p = soap_instantiate__ns1__uploadLabelResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__uploadLabelResponse::out = out; } return _p; }

inline _ns1__uploadLabelResponse * soap_new_set__ns1__uploadLabelResponse(struct soap *soap, std::string *out) { _ns1__uploadLabelResponse *_p = soap_instantiate__ns1__uploadLabelResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__uploadLabelResponse::out = out; } return _p; }

inline void soap_delete__ns1__uploadLabelResponse(struct soap *soap, _ns1__uploadLabelResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__uploadLabelResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__uploadLabel
#define SOAP_TYPE__ns1__uploadLabel (10)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__uploadLabel(struct soap*, const char*, int, const _ns1__uploadLabel *, const char*);
SOAP_FMAC3 _ns1__uploadLabel * SOAP_FMAC4 soap_in__ns1__uploadLabel(struct soap*, const char*, _ns1__uploadLabel *, const char*);

#ifndef soap_write__ns1__uploadLabel
#define soap_write__ns1__uploadLabel(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:uploadLabel", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__uploadLabel * SOAP_FMAC4 soap_get__ns1__uploadLabel(struct soap*, _ns1__uploadLabel *, const char*, const char*);

#ifndef soap_read__ns1__uploadLabel
#define soap_read__ns1__uploadLabel(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__uploadLabel(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__uploadLabel * SOAP_FMAC2 soap_instantiate__ns1__uploadLabel(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__uploadLabel * soap_new__ns1__uploadLabel(struct soap *soap, int n = -1) { return soap_instantiate__ns1__uploadLabel(soap, n, NULL, NULL, NULL); }

inline _ns1__uploadLabel * soap_new_req__ns1__uploadLabel(struct soap *soap, std::string *in0) { _ns1__uploadLabel *_p = soap_instantiate__ns1__uploadLabel(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__uploadLabel::in0 = in0; } return _p; }

inline _ns1__uploadLabel * soap_new_set__ns1__uploadLabel(struct soap *soap, std::string *in0) { _ns1__uploadLabel *_p = soap_instantiate__ns1__uploadLabel(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__uploadLabel::in0 = in0; } return _p; }

inline void soap_delete__ns1__uploadLabel(struct soap *soap, _ns1__uploadLabel *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__uploadLabel(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__getSealInfoResponse
#define SOAP_TYPE__ns1__getSealInfoResponse (9)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSealInfoResponse(struct soap*, const char*, int, const _ns1__getSealInfoResponse *, const char*);
SOAP_FMAC3 _ns1__getSealInfoResponse * SOAP_FMAC4 soap_in__ns1__getSealInfoResponse(struct soap*, const char*, _ns1__getSealInfoResponse *, const char*);

#ifndef soap_write__ns1__getSealInfoResponse
#define soap_write__ns1__getSealInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:getSealInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__getSealInfoResponse * SOAP_FMAC4 soap_get__ns1__getSealInfoResponse(struct soap*, _ns1__getSealInfoResponse *, const char*, const char*);

#ifndef soap_read__ns1__getSealInfoResponse
#define soap_read__ns1__getSealInfoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__getSealInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__getSealInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__getSealInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getSealInfoResponse * soap_new__ns1__getSealInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__getSealInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__getSealInfoResponse * soap_new_req__ns1__getSealInfoResponse(struct soap *soap, std::string *out) { _ns1__getSealInfoResponse *_p = soap_instantiate__ns1__getSealInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__getSealInfoResponse::out = out; } return _p; }

inline _ns1__getSealInfoResponse * soap_new_set__ns1__getSealInfoResponse(struct soap *soap, std::string *out) { _ns1__getSealInfoResponse *_p = soap_instantiate__ns1__getSealInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__getSealInfoResponse::out = out; } return _p; }

inline void soap_delete__ns1__getSealInfoResponse(struct soap *soap, _ns1__getSealInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getSealInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__getSealInfo
#define SOAP_TYPE__ns1__getSealInfo (8)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSealInfo(struct soap*, const char*, int, const _ns1__getSealInfo *, const char*);
SOAP_FMAC3 _ns1__getSealInfo * SOAP_FMAC4 soap_in__ns1__getSealInfo(struct soap*, const char*, _ns1__getSealInfo *, const char*);

#ifndef soap_write__ns1__getSealInfo
#define soap_write__ns1__getSealInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:getSealInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__getSealInfo * SOAP_FMAC4 soap_get__ns1__getSealInfo(struct soap*, _ns1__getSealInfo *, const char*, const char*);

#ifndef soap_read__ns1__getSealInfo
#define soap_read__ns1__getSealInfo(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__getSealInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__getSealInfo * SOAP_FMAC2 soap_instantiate__ns1__getSealInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getSealInfo * soap_new__ns1__getSealInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns1__getSealInfo(soap, n, NULL, NULL, NULL); }

inline _ns1__getSealInfo * soap_new_req__ns1__getSealInfo(struct soap *soap, std::string *in0) { _ns1__getSealInfo *_p = soap_instantiate__ns1__getSealInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__getSealInfo::in0 = in0; } return _p; }

inline _ns1__getSealInfo * soap_new_set__ns1__getSealInfo(struct soap *soap, std::string *in0) { _ns1__getSealInfo *_p = soap_instantiate__ns1__getSealInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__getSealInfo::in0 = in0; } return _p; }

inline void soap_delete__ns1__getSealInfo(struct soap *soap, _ns1__getSealInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getSealInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (114)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (113)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (110)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (108)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (107)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE___ns1__uploadPackInfo
#define SOAP_TYPE___ns1__uploadPackInfo (106)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__uploadPackInfo(struct soap*, struct __ns1__uploadPackInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__uploadPackInfo(struct soap*, const struct __ns1__uploadPackInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__uploadPackInfo(struct soap*, const char*, int, const struct __ns1__uploadPackInfo *, const char*);
SOAP_FMAC3 struct __ns1__uploadPackInfo * SOAP_FMAC4 soap_in___ns1__uploadPackInfo(struct soap*, const char*, struct __ns1__uploadPackInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__uploadPackInfo(struct soap*, const struct __ns1__uploadPackInfo *, const char*, const char*);

#ifndef soap_write___ns1__uploadPackInfo
#define soap_write___ns1__uploadPackInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__uploadPackInfo(soap, data),0) || soap_put___ns1__uploadPackInfo(soap, data, "-ns1:uploadPackInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__uploadPackInfo * SOAP_FMAC4 soap_get___ns1__uploadPackInfo(struct soap*, struct __ns1__uploadPackInfo *, const char*, const char*);

#ifndef soap_read___ns1__uploadPackInfo
#define soap_read___ns1__uploadPackInfo(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__uploadPackInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__uploadPackInfo * SOAP_FMAC2 soap_instantiate___ns1__uploadPackInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__uploadPackInfo * soap_new___ns1__uploadPackInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__uploadPackInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__uploadPackInfo * soap_new_req___ns1__uploadPackInfo(struct soap *soap) { struct __ns1__uploadPackInfo *_p = soap_instantiate___ns1__uploadPackInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__uploadPackInfo(soap, _p); } return _p; }

inline struct __ns1__uploadPackInfo * soap_new_set___ns1__uploadPackInfo(struct soap *soap, _ns1__uploadPackInfo *ns1__uploadPackInfo) { struct __ns1__uploadPackInfo *_p = soap_instantiate___ns1__uploadPackInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__uploadPackInfo(soap, _p); _p->ns1__uploadPackInfo = ns1__uploadPackInfo; } return _p; }

inline void soap_delete___ns1__uploadPackInfo(struct soap *soap, struct __ns1__uploadPackInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__uploadPackInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getAlarm
#define SOAP_TYPE___ns1__getAlarm (102)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getAlarm(struct soap*, struct __ns1__getAlarm *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getAlarm(struct soap*, const struct __ns1__getAlarm *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getAlarm(struct soap*, const char*, int, const struct __ns1__getAlarm *, const char*);
SOAP_FMAC3 struct __ns1__getAlarm * SOAP_FMAC4 soap_in___ns1__getAlarm(struct soap*, const char*, struct __ns1__getAlarm *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getAlarm(struct soap*, const struct __ns1__getAlarm *, const char*, const char*);

#ifndef soap_write___ns1__getAlarm
#define soap_write___ns1__getAlarm(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getAlarm(soap, data),0) || soap_put___ns1__getAlarm(soap, data, "-ns1:getAlarm", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getAlarm * SOAP_FMAC4 soap_get___ns1__getAlarm(struct soap*, struct __ns1__getAlarm *, const char*, const char*);

#ifndef soap_read___ns1__getAlarm
#define soap_read___ns1__getAlarm(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getAlarm(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getAlarm * SOAP_FMAC2 soap_instantiate___ns1__getAlarm(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getAlarm * soap_new___ns1__getAlarm(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getAlarm(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getAlarm * soap_new_req___ns1__getAlarm(struct soap *soap) { struct __ns1__getAlarm *_p = soap_instantiate___ns1__getAlarm(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getAlarm(soap, _p); } return _p; }

inline struct __ns1__getAlarm * soap_new_set___ns1__getAlarm(struct soap *soap, _ns1__getAlarm *ns1__getAlarm) { struct __ns1__getAlarm *_p = soap_instantiate___ns1__getAlarm(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getAlarm(soap, _p); _p->ns1__getAlarm = ns1__getAlarm; } return _p; }

inline void soap_delete___ns1__getAlarm(struct soap *soap, struct __ns1__getAlarm *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getAlarm(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__upBoxInputPileDet
#define SOAP_TYPE___ns1__upBoxInputPileDet (98)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__upBoxInputPileDet(struct soap*, struct __ns1__upBoxInputPileDet *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__upBoxInputPileDet(struct soap*, const struct __ns1__upBoxInputPileDet *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__upBoxInputPileDet(struct soap*, const char*, int, const struct __ns1__upBoxInputPileDet *, const char*);
SOAP_FMAC3 struct __ns1__upBoxInputPileDet * SOAP_FMAC4 soap_in___ns1__upBoxInputPileDet(struct soap*, const char*, struct __ns1__upBoxInputPileDet *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__upBoxInputPileDet(struct soap*, const struct __ns1__upBoxInputPileDet *, const char*, const char*);

#ifndef soap_write___ns1__upBoxInputPileDet
#define soap_write___ns1__upBoxInputPileDet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__upBoxInputPileDet(soap, data),0) || soap_put___ns1__upBoxInputPileDet(soap, data, "-ns1:upBoxInputPileDet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__upBoxInputPileDet * SOAP_FMAC4 soap_get___ns1__upBoxInputPileDet(struct soap*, struct __ns1__upBoxInputPileDet *, const char*, const char*);

#ifndef soap_read___ns1__upBoxInputPileDet
#define soap_read___ns1__upBoxInputPileDet(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__upBoxInputPileDet(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__upBoxInputPileDet * SOAP_FMAC2 soap_instantiate___ns1__upBoxInputPileDet(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__upBoxInputPileDet * soap_new___ns1__upBoxInputPileDet(struct soap *soap, int n = -1) { return soap_instantiate___ns1__upBoxInputPileDet(soap, n, NULL, NULL, NULL); }

inline struct __ns1__upBoxInputPileDet * soap_new_req___ns1__upBoxInputPileDet(struct soap *soap) { struct __ns1__upBoxInputPileDet *_p = soap_instantiate___ns1__upBoxInputPileDet(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__upBoxInputPileDet(soap, _p); } return _p; }

inline struct __ns1__upBoxInputPileDet * soap_new_set___ns1__upBoxInputPileDet(struct soap *soap, _ns1__upBoxInputPileDet *ns1__upBoxInputPileDet) { struct __ns1__upBoxInputPileDet *_p = soap_instantiate___ns1__upBoxInputPileDet(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__upBoxInputPileDet(soap, _p); _p->ns1__upBoxInputPileDet = ns1__upBoxInputPileDet; } return _p; }

inline void soap_delete___ns1__upBoxInputPileDet(struct soap *soap, struct __ns1__upBoxInputPileDet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__upBoxInputPileDet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__boxCheckInfo
#define SOAP_TYPE___ns1__boxCheckInfo (94)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__boxCheckInfo(struct soap*, struct __ns1__boxCheckInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__boxCheckInfo(struct soap*, const struct __ns1__boxCheckInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__boxCheckInfo(struct soap*, const char*, int, const struct __ns1__boxCheckInfo *, const char*);
SOAP_FMAC3 struct __ns1__boxCheckInfo * SOAP_FMAC4 soap_in___ns1__boxCheckInfo(struct soap*, const char*, struct __ns1__boxCheckInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__boxCheckInfo(struct soap*, const struct __ns1__boxCheckInfo *, const char*, const char*);

#ifndef soap_write___ns1__boxCheckInfo
#define soap_write___ns1__boxCheckInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__boxCheckInfo(soap, data),0) || soap_put___ns1__boxCheckInfo(soap, data, "-ns1:boxCheckInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__boxCheckInfo * SOAP_FMAC4 soap_get___ns1__boxCheckInfo(struct soap*, struct __ns1__boxCheckInfo *, const char*, const char*);

#ifndef soap_read___ns1__boxCheckInfo
#define soap_read___ns1__boxCheckInfo(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__boxCheckInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__boxCheckInfo * SOAP_FMAC2 soap_instantiate___ns1__boxCheckInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__boxCheckInfo * soap_new___ns1__boxCheckInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__boxCheckInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__boxCheckInfo * soap_new_req___ns1__boxCheckInfo(struct soap *soap) { struct __ns1__boxCheckInfo *_p = soap_instantiate___ns1__boxCheckInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__boxCheckInfo(soap, _p); } return _p; }

inline struct __ns1__boxCheckInfo * soap_new_set___ns1__boxCheckInfo(struct soap *soap, _ns1__boxCheckInfo *ns1__boxCheckInfo) { struct __ns1__boxCheckInfo *_p = soap_instantiate___ns1__boxCheckInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__boxCheckInfo(soap, _p); _p->ns1__boxCheckInfo = ns1__boxCheckInfo; } return _p; }

inline void soap_delete___ns1__boxCheckInfo(struct soap *soap, struct __ns1__boxCheckInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__boxCheckInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__equipCheckInfo
#define SOAP_TYPE___ns1__equipCheckInfo (90)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__equipCheckInfo(struct soap*, struct __ns1__equipCheckInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__equipCheckInfo(struct soap*, const struct __ns1__equipCheckInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__equipCheckInfo(struct soap*, const char*, int, const struct __ns1__equipCheckInfo *, const char*);
SOAP_FMAC3 struct __ns1__equipCheckInfo * SOAP_FMAC4 soap_in___ns1__equipCheckInfo(struct soap*, const char*, struct __ns1__equipCheckInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__equipCheckInfo(struct soap*, const struct __ns1__equipCheckInfo *, const char*, const char*);

#ifndef soap_write___ns1__equipCheckInfo
#define soap_write___ns1__equipCheckInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__equipCheckInfo(soap, data),0) || soap_put___ns1__equipCheckInfo(soap, data, "-ns1:equipCheckInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__equipCheckInfo * SOAP_FMAC4 soap_get___ns1__equipCheckInfo(struct soap*, struct __ns1__equipCheckInfo *, const char*, const char*);

#ifndef soap_read___ns1__equipCheckInfo
#define soap_read___ns1__equipCheckInfo(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__equipCheckInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__equipCheckInfo * SOAP_FMAC2 soap_instantiate___ns1__equipCheckInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__equipCheckInfo * soap_new___ns1__equipCheckInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__equipCheckInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__equipCheckInfo * soap_new_req___ns1__equipCheckInfo(struct soap *soap) { struct __ns1__equipCheckInfo *_p = soap_instantiate___ns1__equipCheckInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__equipCheckInfo(soap, _p); } return _p; }

inline struct __ns1__equipCheckInfo * soap_new_set___ns1__equipCheckInfo(struct soap *soap, _ns1__equipCheckInfo *ns1__equipCheckInfo) { struct __ns1__equipCheckInfo *_p = soap_instantiate___ns1__equipCheckInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__equipCheckInfo(soap, _p); _p->ns1__equipCheckInfo = ns1__equipCheckInfo; } return _p; }

inline void soap_delete___ns1__equipCheckInfo(struct soap *soap, struct __ns1__equipCheckInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__equipCheckInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getDBConnInfo
#define SOAP_TYPE___ns1__getDBConnInfo (86)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getDBConnInfo(struct soap*, struct __ns1__getDBConnInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getDBConnInfo(struct soap*, const struct __ns1__getDBConnInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getDBConnInfo(struct soap*, const char*, int, const struct __ns1__getDBConnInfo *, const char*);
SOAP_FMAC3 struct __ns1__getDBConnInfo * SOAP_FMAC4 soap_in___ns1__getDBConnInfo(struct soap*, const char*, struct __ns1__getDBConnInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getDBConnInfo(struct soap*, const struct __ns1__getDBConnInfo *, const char*, const char*);

#ifndef soap_write___ns1__getDBConnInfo
#define soap_write___ns1__getDBConnInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getDBConnInfo(soap, data),0) || soap_put___ns1__getDBConnInfo(soap, data, "-ns1:getDBConnInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getDBConnInfo * SOAP_FMAC4 soap_get___ns1__getDBConnInfo(struct soap*, struct __ns1__getDBConnInfo *, const char*, const char*);

#ifndef soap_read___ns1__getDBConnInfo
#define soap_read___ns1__getDBConnInfo(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getDBConnInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getDBConnInfo * SOAP_FMAC2 soap_instantiate___ns1__getDBConnInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getDBConnInfo * soap_new___ns1__getDBConnInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getDBConnInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getDBConnInfo * soap_new_req___ns1__getDBConnInfo(struct soap *soap) { struct __ns1__getDBConnInfo *_p = soap_instantiate___ns1__getDBConnInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getDBConnInfo(soap, _p); } return _p; }

inline struct __ns1__getDBConnInfo * soap_new_set___ns1__getDBConnInfo(struct soap *soap, _ns1__getDBConnInfo *ns1__getDBConnInfo) { struct __ns1__getDBConnInfo *_p = soap_instantiate___ns1__getDBConnInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getDBConnInfo(soap, _p); _p->ns1__getDBConnInfo = ns1__getDBConnInfo; } return _p; }

inline void soap_delete___ns1__getDBConnInfo(struct soap *soap, struct __ns1__getDBConnInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getDBConnInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__applyEquip
#define SOAP_TYPE___ns1__applyEquip (82)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__applyEquip(struct soap*, struct __ns1__applyEquip *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__applyEquip(struct soap*, const struct __ns1__applyEquip *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__applyEquip(struct soap*, const char*, int, const struct __ns1__applyEquip *, const char*);
SOAP_FMAC3 struct __ns1__applyEquip * SOAP_FMAC4 soap_in___ns1__applyEquip(struct soap*, const char*, struct __ns1__applyEquip *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__applyEquip(struct soap*, const struct __ns1__applyEquip *, const char*, const char*);

#ifndef soap_write___ns1__applyEquip
#define soap_write___ns1__applyEquip(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__applyEquip(soap, data),0) || soap_put___ns1__applyEquip(soap, data, "-ns1:applyEquip", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__applyEquip * SOAP_FMAC4 soap_get___ns1__applyEquip(struct soap*, struct __ns1__applyEquip *, const char*, const char*);

#ifndef soap_read___ns1__applyEquip
#define soap_read___ns1__applyEquip(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__applyEquip(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__applyEquip * SOAP_FMAC2 soap_instantiate___ns1__applyEquip(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__applyEquip * soap_new___ns1__applyEquip(struct soap *soap, int n = -1) { return soap_instantiate___ns1__applyEquip(soap, n, NULL, NULL, NULL); }

inline struct __ns1__applyEquip * soap_new_req___ns1__applyEquip(struct soap *soap) { struct __ns1__applyEquip *_p = soap_instantiate___ns1__applyEquip(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__applyEquip(soap, _p); } return _p; }

inline struct __ns1__applyEquip * soap_new_set___ns1__applyEquip(struct soap *soap, _ns1__applyEquip *ns1__applyEquip) { struct __ns1__applyEquip *_p = soap_instantiate___ns1__applyEquip(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__applyEquip(soap, _p); _p->ns1__applyEquip = ns1__applyEquip; } return _p; }

inline void soap_delete___ns1__applyEquip(struct soap *soap, struct __ns1__applyEquip *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__applyEquip(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getMachineHandInfo
#define SOAP_TYPE___ns1__getMachineHandInfo (78)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getMachineHandInfo(struct soap*, struct __ns1__getMachineHandInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getMachineHandInfo(struct soap*, const struct __ns1__getMachineHandInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getMachineHandInfo(struct soap*, const char*, int, const struct __ns1__getMachineHandInfo *, const char*);
SOAP_FMAC3 struct __ns1__getMachineHandInfo * SOAP_FMAC4 soap_in___ns1__getMachineHandInfo(struct soap*, const char*, struct __ns1__getMachineHandInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getMachineHandInfo(struct soap*, const struct __ns1__getMachineHandInfo *, const char*, const char*);

#ifndef soap_write___ns1__getMachineHandInfo
#define soap_write___ns1__getMachineHandInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getMachineHandInfo(soap, data),0) || soap_put___ns1__getMachineHandInfo(soap, data, "-ns1:getMachineHandInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getMachineHandInfo * SOAP_FMAC4 soap_get___ns1__getMachineHandInfo(struct soap*, struct __ns1__getMachineHandInfo *, const char*, const char*);

#ifndef soap_read___ns1__getMachineHandInfo
#define soap_read___ns1__getMachineHandInfo(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getMachineHandInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getMachineHandInfo * SOAP_FMAC2 soap_instantiate___ns1__getMachineHandInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getMachineHandInfo * soap_new___ns1__getMachineHandInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getMachineHandInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getMachineHandInfo * soap_new_req___ns1__getMachineHandInfo(struct soap *soap) { struct __ns1__getMachineHandInfo *_p = soap_instantiate___ns1__getMachineHandInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getMachineHandInfo(soap, _p); } return _p; }

inline struct __ns1__getMachineHandInfo * soap_new_set___ns1__getMachineHandInfo(struct soap *soap, _ns1__getMachineHandInfo *ns1__getMachineHandInfo) { struct __ns1__getMachineHandInfo *_p = soap_instantiate___ns1__getMachineHandInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getMachineHandInfo(soap, _p); _p->ns1__getMachineHandInfo = ns1__getMachineHandInfo; } return _p; }

inline void soap_delete___ns1__getMachineHandInfo(struct soap *soap, struct __ns1__getMachineHandInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getMachineHandInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__setResults
#define SOAP_TYPE___ns1__setResults (74)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setResults(struct soap*, struct __ns1__setResults *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setResults(struct soap*, const struct __ns1__setResults *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setResults(struct soap*, const char*, int, const struct __ns1__setResults *, const char*);
SOAP_FMAC3 struct __ns1__setResults * SOAP_FMAC4 soap_in___ns1__setResults(struct soap*, const char*, struct __ns1__setResults *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setResults(struct soap*, const struct __ns1__setResults *, const char*, const char*);

#ifndef soap_write___ns1__setResults
#define soap_write___ns1__setResults(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__setResults(soap, data),0) || soap_put___ns1__setResults(soap, data, "-ns1:setResults", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__setResults * SOAP_FMAC4 soap_get___ns1__setResults(struct soap*, struct __ns1__setResults *, const char*, const char*);

#ifndef soap_read___ns1__setResults
#define soap_read___ns1__setResults(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__setResults(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__setResults * SOAP_FMAC2 soap_instantiate___ns1__setResults(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__setResults * soap_new___ns1__setResults(struct soap *soap, int n = -1) { return soap_instantiate___ns1__setResults(soap, n, NULL, NULL, NULL); }

inline struct __ns1__setResults * soap_new_req___ns1__setResults(struct soap *soap) { struct __ns1__setResults *_p = soap_instantiate___ns1__setResults(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setResults(soap, _p); } return _p; }

inline struct __ns1__setResults * soap_new_set___ns1__setResults(struct soap *soap, _ns1__setResults *ns1__setResults) { struct __ns1__setResults *_p = soap_instantiate___ns1__setResults(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__setResults(soap, _p); _p->ns1__setResults = ns1__setResults; } return _p; }

inline void soap_delete___ns1__setResults(struct soap *soap, struct __ns1__setResults *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__setResults(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getDETedTestData
#define SOAP_TYPE___ns1__getDETedTestData (70)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getDETedTestData(struct soap*, struct __ns1__getDETedTestData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getDETedTestData(struct soap*, const struct __ns1__getDETedTestData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getDETedTestData(struct soap*, const char*, int, const struct __ns1__getDETedTestData *, const char*);
SOAP_FMAC3 struct __ns1__getDETedTestData * SOAP_FMAC4 soap_in___ns1__getDETedTestData(struct soap*, const char*, struct __ns1__getDETedTestData *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getDETedTestData(struct soap*, const struct __ns1__getDETedTestData *, const char*, const char*);

#ifndef soap_write___ns1__getDETedTestData
#define soap_write___ns1__getDETedTestData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getDETedTestData(soap, data),0) || soap_put___ns1__getDETedTestData(soap, data, "-ns1:getDETedTestData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getDETedTestData * SOAP_FMAC4 soap_get___ns1__getDETedTestData(struct soap*, struct __ns1__getDETedTestData *, const char*, const char*);

#ifndef soap_read___ns1__getDETedTestData
#define soap_read___ns1__getDETedTestData(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getDETedTestData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getDETedTestData * SOAP_FMAC2 soap_instantiate___ns1__getDETedTestData(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getDETedTestData * soap_new___ns1__getDETedTestData(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getDETedTestData(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getDETedTestData * soap_new_req___ns1__getDETedTestData(struct soap *soap) { struct __ns1__getDETedTestData *_p = soap_instantiate___ns1__getDETedTestData(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getDETedTestData(soap, _p); } return _p; }

inline struct __ns1__getDETedTestData * soap_new_set___ns1__getDETedTestData(struct soap *soap, _ns1__getDETedTestData *ns1__getDETedTestData) { struct __ns1__getDETedTestData *_p = soap_instantiate___ns1__getDETedTestData(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getDETedTestData(soap, _p); _p->ns1__getDETedTestData = ns1__getDETedTestData; } return _p; }

inline void soap_delete___ns1__getDETedTestData(struct soap *soap, struct __ns1__getDETedTestData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getDETedTestData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__applyAssistEquip
#define SOAP_TYPE___ns1__applyAssistEquip (66)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__applyAssistEquip(struct soap*, struct __ns1__applyAssistEquip *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__applyAssistEquip(struct soap*, const struct __ns1__applyAssistEquip *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__applyAssistEquip(struct soap*, const char*, int, const struct __ns1__applyAssistEquip *, const char*);
SOAP_FMAC3 struct __ns1__applyAssistEquip * SOAP_FMAC4 soap_in___ns1__applyAssistEquip(struct soap*, const char*, struct __ns1__applyAssistEquip *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__applyAssistEquip(struct soap*, const struct __ns1__applyAssistEquip *, const char*, const char*);

#ifndef soap_write___ns1__applyAssistEquip
#define soap_write___ns1__applyAssistEquip(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__applyAssistEquip(soap, data),0) || soap_put___ns1__applyAssistEquip(soap, data, "-ns1:applyAssistEquip", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__applyAssistEquip * SOAP_FMAC4 soap_get___ns1__applyAssistEquip(struct soap*, struct __ns1__applyAssistEquip *, const char*, const char*);

#ifndef soap_read___ns1__applyAssistEquip
#define soap_read___ns1__applyAssistEquip(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__applyAssistEquip(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__applyAssistEquip * SOAP_FMAC2 soap_instantiate___ns1__applyAssistEquip(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__applyAssistEquip * soap_new___ns1__applyAssistEquip(struct soap *soap, int n = -1) { return soap_instantiate___ns1__applyAssistEquip(soap, n, NULL, NULL, NULL); }

inline struct __ns1__applyAssistEquip * soap_new_req___ns1__applyAssistEquip(struct soap *soap) { struct __ns1__applyAssistEquip *_p = soap_instantiate___ns1__applyAssistEquip(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__applyAssistEquip(soap, _p); } return _p; }

inline struct __ns1__applyAssistEquip * soap_new_set___ns1__applyAssistEquip(struct soap *soap, _ns1__applyAssistEquip *ns1__applyAssistEquip) { struct __ns1__applyAssistEquip *_p = soap_instantiate___ns1__applyAssistEquip(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__applyAssistEquip(soap, _p); _p->ns1__applyAssistEquip = ns1__applyAssistEquip; } return _p; }

inline void soap_delete___ns1__applyAssistEquip(struct soap *soap, struct __ns1__applyAssistEquip *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__applyAssistEquip(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__sendTaskFinishFlag
#define SOAP_TYPE___ns1__sendTaskFinishFlag (62)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__sendTaskFinishFlag(struct soap*, struct __ns1__sendTaskFinishFlag *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__sendTaskFinishFlag(struct soap*, const struct __ns1__sendTaskFinishFlag *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__sendTaskFinishFlag(struct soap*, const char*, int, const struct __ns1__sendTaskFinishFlag *, const char*);
SOAP_FMAC3 struct __ns1__sendTaskFinishFlag * SOAP_FMAC4 soap_in___ns1__sendTaskFinishFlag(struct soap*, const char*, struct __ns1__sendTaskFinishFlag *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__sendTaskFinishFlag(struct soap*, const struct __ns1__sendTaskFinishFlag *, const char*, const char*);

#ifndef soap_write___ns1__sendTaskFinishFlag
#define soap_write___ns1__sendTaskFinishFlag(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__sendTaskFinishFlag(soap, data),0) || soap_put___ns1__sendTaskFinishFlag(soap, data, "-ns1:sendTaskFinishFlag", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__sendTaskFinishFlag * SOAP_FMAC4 soap_get___ns1__sendTaskFinishFlag(struct soap*, struct __ns1__sendTaskFinishFlag *, const char*, const char*);

#ifndef soap_read___ns1__sendTaskFinishFlag
#define soap_read___ns1__sendTaskFinishFlag(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__sendTaskFinishFlag(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__sendTaskFinishFlag * SOAP_FMAC2 soap_instantiate___ns1__sendTaskFinishFlag(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__sendTaskFinishFlag * soap_new___ns1__sendTaskFinishFlag(struct soap *soap, int n = -1) { return soap_instantiate___ns1__sendTaskFinishFlag(soap, n, NULL, NULL, NULL); }

inline struct __ns1__sendTaskFinishFlag * soap_new_req___ns1__sendTaskFinishFlag(struct soap *soap) { struct __ns1__sendTaskFinishFlag *_p = soap_instantiate___ns1__sendTaskFinishFlag(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__sendTaskFinishFlag(soap, _p); } return _p; }

inline struct __ns1__sendTaskFinishFlag * soap_new_set___ns1__sendTaskFinishFlag(struct soap *soap, _ns1__sendTaskFinishFlag *ns1__sendTaskFinishFlag) { struct __ns1__sendTaskFinishFlag *_p = soap_instantiate___ns1__sendTaskFinishFlag(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__sendTaskFinishFlag(soap, _p); _p->ns1__sendTaskFinishFlag = ns1__sendTaskFinishFlag; } return _p; }

inline void soap_delete___ns1__sendTaskFinishFlag(struct soap *soap, struct __ns1__sendTaskFinishFlag *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__sendTaskFinishFlag(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__uploadSealsCode
#define SOAP_TYPE___ns1__uploadSealsCode (58)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__uploadSealsCode(struct soap*, struct __ns1__uploadSealsCode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__uploadSealsCode(struct soap*, const struct __ns1__uploadSealsCode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__uploadSealsCode(struct soap*, const char*, int, const struct __ns1__uploadSealsCode *, const char*);
SOAP_FMAC3 struct __ns1__uploadSealsCode * SOAP_FMAC4 soap_in___ns1__uploadSealsCode(struct soap*, const char*, struct __ns1__uploadSealsCode *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__uploadSealsCode(struct soap*, const struct __ns1__uploadSealsCode *, const char*, const char*);

#ifndef soap_write___ns1__uploadSealsCode
#define soap_write___ns1__uploadSealsCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__uploadSealsCode(soap, data),0) || soap_put___ns1__uploadSealsCode(soap, data, "-ns1:uploadSealsCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__uploadSealsCode * SOAP_FMAC4 soap_get___ns1__uploadSealsCode(struct soap*, struct __ns1__uploadSealsCode *, const char*, const char*);

#ifndef soap_read___ns1__uploadSealsCode
#define soap_read___ns1__uploadSealsCode(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__uploadSealsCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__uploadSealsCode * SOAP_FMAC2 soap_instantiate___ns1__uploadSealsCode(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__uploadSealsCode * soap_new___ns1__uploadSealsCode(struct soap *soap, int n = -1) { return soap_instantiate___ns1__uploadSealsCode(soap, n, NULL, NULL, NULL); }

inline struct __ns1__uploadSealsCode * soap_new_req___ns1__uploadSealsCode(struct soap *soap) { struct __ns1__uploadSealsCode *_p = soap_instantiate___ns1__uploadSealsCode(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__uploadSealsCode(soap, _p); } return _p; }

inline struct __ns1__uploadSealsCode * soap_new_set___ns1__uploadSealsCode(struct soap *soap, _ns1__uploadSealsCode *ns1__uploadSealsCode) { struct __ns1__uploadSealsCode *_p = soap_instantiate___ns1__uploadSealsCode(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__uploadSealsCode(soap, _p); _p->ns1__uploadSealsCode = ns1__uploadSealsCode; } return _p; }

inline void soap_delete___ns1__uploadSealsCode(struct soap *soap, struct __ns1__uploadSealsCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__uploadSealsCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__sendCtrlTaskFinishFlag
#define SOAP_TYPE___ns1__sendCtrlTaskFinishFlag (54)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__sendCtrlTaskFinishFlag(struct soap*, struct __ns1__sendCtrlTaskFinishFlag *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__sendCtrlTaskFinishFlag(struct soap*, const struct __ns1__sendCtrlTaskFinishFlag *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__sendCtrlTaskFinishFlag(struct soap*, const char*, int, const struct __ns1__sendCtrlTaskFinishFlag *, const char*);
SOAP_FMAC3 struct __ns1__sendCtrlTaskFinishFlag * SOAP_FMAC4 soap_in___ns1__sendCtrlTaskFinishFlag(struct soap*, const char*, struct __ns1__sendCtrlTaskFinishFlag *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__sendCtrlTaskFinishFlag(struct soap*, const struct __ns1__sendCtrlTaskFinishFlag *, const char*, const char*);

#ifndef soap_write___ns1__sendCtrlTaskFinishFlag
#define soap_write___ns1__sendCtrlTaskFinishFlag(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__sendCtrlTaskFinishFlag(soap, data),0) || soap_put___ns1__sendCtrlTaskFinishFlag(soap, data, "-ns1:sendCtrlTaskFinishFlag", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__sendCtrlTaskFinishFlag * SOAP_FMAC4 soap_get___ns1__sendCtrlTaskFinishFlag(struct soap*, struct __ns1__sendCtrlTaskFinishFlag *, const char*, const char*);

#ifndef soap_read___ns1__sendCtrlTaskFinishFlag
#define soap_read___ns1__sendCtrlTaskFinishFlag(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__sendCtrlTaskFinishFlag(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__sendCtrlTaskFinishFlag * SOAP_FMAC2 soap_instantiate___ns1__sendCtrlTaskFinishFlag(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__sendCtrlTaskFinishFlag * soap_new___ns1__sendCtrlTaskFinishFlag(struct soap *soap, int n = -1) { return soap_instantiate___ns1__sendCtrlTaskFinishFlag(soap, n, NULL, NULL, NULL); }

inline struct __ns1__sendCtrlTaskFinishFlag * soap_new_req___ns1__sendCtrlTaskFinishFlag(struct soap *soap) { struct __ns1__sendCtrlTaskFinishFlag *_p = soap_instantiate___ns1__sendCtrlTaskFinishFlag(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__sendCtrlTaskFinishFlag(soap, _p); } return _p; }

inline struct __ns1__sendCtrlTaskFinishFlag * soap_new_set___ns1__sendCtrlTaskFinishFlag(struct soap *soap, _ns1__sendCtrlTaskFinishFlag *ns1__sendCtrlTaskFinishFlag) { struct __ns1__sendCtrlTaskFinishFlag *_p = soap_instantiate___ns1__sendCtrlTaskFinishFlag(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__sendCtrlTaskFinishFlag(soap, _p); _p->ns1__sendCtrlTaskFinishFlag = ns1__sendCtrlTaskFinishFlag; } return _p; }

inline void soap_delete___ns1__sendCtrlTaskFinishFlag(struct soap *soap, struct __ns1__sendCtrlTaskFinishFlag *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__sendCtrlTaskFinishFlag(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__uploadLabel
#define SOAP_TYPE___ns1__uploadLabel (50)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__uploadLabel(struct soap*, struct __ns1__uploadLabel *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__uploadLabel(struct soap*, const struct __ns1__uploadLabel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__uploadLabel(struct soap*, const char*, int, const struct __ns1__uploadLabel *, const char*);
SOAP_FMAC3 struct __ns1__uploadLabel * SOAP_FMAC4 soap_in___ns1__uploadLabel(struct soap*, const char*, struct __ns1__uploadLabel *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__uploadLabel(struct soap*, const struct __ns1__uploadLabel *, const char*, const char*);

#ifndef soap_write___ns1__uploadLabel
#define soap_write___ns1__uploadLabel(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__uploadLabel(soap, data),0) || soap_put___ns1__uploadLabel(soap, data, "-ns1:uploadLabel", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__uploadLabel * SOAP_FMAC4 soap_get___ns1__uploadLabel(struct soap*, struct __ns1__uploadLabel *, const char*, const char*);

#ifndef soap_read___ns1__uploadLabel
#define soap_read___ns1__uploadLabel(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__uploadLabel(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__uploadLabel * SOAP_FMAC2 soap_instantiate___ns1__uploadLabel(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__uploadLabel * soap_new___ns1__uploadLabel(struct soap *soap, int n = -1) { return soap_instantiate___ns1__uploadLabel(soap, n, NULL, NULL, NULL); }

inline struct __ns1__uploadLabel * soap_new_req___ns1__uploadLabel(struct soap *soap) { struct __ns1__uploadLabel *_p = soap_instantiate___ns1__uploadLabel(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__uploadLabel(soap, _p); } return _p; }

inline struct __ns1__uploadLabel * soap_new_set___ns1__uploadLabel(struct soap *soap, _ns1__uploadLabel *ns1__uploadLabel) { struct __ns1__uploadLabel *_p = soap_instantiate___ns1__uploadLabel(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__uploadLabel(soap, _p); _p->ns1__uploadLabel = ns1__uploadLabel; } return _p; }

inline void soap_delete___ns1__uploadLabel(struct soap *soap, struct __ns1__uploadLabel *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__uploadLabel(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__getSealInfo
#define SOAP_TYPE___ns1__getSealInfo (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSealInfo(struct soap*, struct __ns1__getSealInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSealInfo(struct soap*, const struct __ns1__getSealInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSealInfo(struct soap*, const char*, int, const struct __ns1__getSealInfo *, const char*);
SOAP_FMAC3 struct __ns1__getSealInfo * SOAP_FMAC4 soap_in___ns1__getSealInfo(struct soap*, const char*, struct __ns1__getSealInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSealInfo(struct soap*, const struct __ns1__getSealInfo *, const char*, const char*);

#ifndef soap_write___ns1__getSealInfo
#define soap_write___ns1__getSealInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getSealInfo(soap, data),0) || soap_put___ns1__getSealInfo(soap, data, "-ns1:getSealInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getSealInfo * SOAP_FMAC4 soap_get___ns1__getSealInfo(struct soap*, struct __ns1__getSealInfo *, const char*, const char*);

#ifndef soap_read___ns1__getSealInfo
#define soap_read___ns1__getSealInfo(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__getSealInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__getSealInfo * SOAP_FMAC2 soap_instantiate___ns1__getSealInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getSealInfo * soap_new___ns1__getSealInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__getSealInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__getSealInfo * soap_new_req___ns1__getSealInfo(struct soap *soap) { struct __ns1__getSealInfo *_p = soap_instantiate___ns1__getSealInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getSealInfo(soap, _p); } return _p; }

inline struct __ns1__getSealInfo * soap_new_set___ns1__getSealInfo(struct soap *soap, _ns1__getSealInfo *ns1__getSealInfo) { struct __ns1__getSealInfo *_p = soap_instantiate___ns1__getSealInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__getSealInfo(soap, _p); _p->ns1__getSealInfo = ns1__getSealInfo; } return _p; }

inline void soap_delete___ns1__getSealInfo(struct soap *soap, struct __ns1__getSealInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getSealInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (116)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (115)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (109)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTo_ns1__uploadPackInfo
#define SOAP_TYPE_PointerTo_ns1__uploadPackInfo (103)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__uploadPackInfo(struct soap*, _ns1__uploadPackInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__uploadPackInfo(struct soap*, const char *, int, _ns1__uploadPackInfo *const*, const char *);
SOAP_FMAC3 _ns1__uploadPackInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__uploadPackInfo(struct soap*, const char*, _ns1__uploadPackInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__uploadPackInfo(struct soap*, _ns1__uploadPackInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__uploadPackInfo
#define soap_write_PointerTo_ns1__uploadPackInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__uploadPackInfo(soap, data),0) || soap_put_PointerTo_ns1__uploadPackInfo(soap, data, "ns1:uploadPackInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__uploadPackInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__uploadPackInfo(struct soap*, _ns1__uploadPackInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__uploadPackInfo
#define soap_read_PointerTo_ns1__uploadPackInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__uploadPackInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__getAlarm
#define SOAP_TYPE_PointerTo_ns1__getAlarm (99)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getAlarm(struct soap*, _ns1__getAlarm *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getAlarm(struct soap*, const char *, int, _ns1__getAlarm *const*, const char *);
SOAP_FMAC3 _ns1__getAlarm ** SOAP_FMAC4 soap_in_PointerTo_ns1__getAlarm(struct soap*, const char*, _ns1__getAlarm **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getAlarm(struct soap*, _ns1__getAlarm *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__getAlarm
#define soap_write_PointerTo_ns1__getAlarm(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__getAlarm(soap, data),0) || soap_put_PointerTo_ns1__getAlarm(soap, data, "ns1:getAlarm", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__getAlarm ** SOAP_FMAC4 soap_get_PointerTo_ns1__getAlarm(struct soap*, _ns1__getAlarm **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__getAlarm
#define soap_read_PointerTo_ns1__getAlarm(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__getAlarm(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__upBoxInputPileDet
#define SOAP_TYPE_PointerTo_ns1__upBoxInputPileDet (95)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__upBoxInputPileDet(struct soap*, _ns1__upBoxInputPileDet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__upBoxInputPileDet(struct soap*, const char *, int, _ns1__upBoxInputPileDet *const*, const char *);
SOAP_FMAC3 _ns1__upBoxInputPileDet ** SOAP_FMAC4 soap_in_PointerTo_ns1__upBoxInputPileDet(struct soap*, const char*, _ns1__upBoxInputPileDet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__upBoxInputPileDet(struct soap*, _ns1__upBoxInputPileDet *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__upBoxInputPileDet
#define soap_write_PointerTo_ns1__upBoxInputPileDet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__upBoxInputPileDet(soap, data),0) || soap_put_PointerTo_ns1__upBoxInputPileDet(soap, data, "ns1:upBoxInputPileDet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__upBoxInputPileDet ** SOAP_FMAC4 soap_get_PointerTo_ns1__upBoxInputPileDet(struct soap*, _ns1__upBoxInputPileDet **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__upBoxInputPileDet
#define soap_read_PointerTo_ns1__upBoxInputPileDet(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__upBoxInputPileDet(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__boxCheckInfo
#define SOAP_TYPE_PointerTo_ns1__boxCheckInfo (91)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__boxCheckInfo(struct soap*, _ns1__boxCheckInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__boxCheckInfo(struct soap*, const char *, int, _ns1__boxCheckInfo *const*, const char *);
SOAP_FMAC3 _ns1__boxCheckInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__boxCheckInfo(struct soap*, const char*, _ns1__boxCheckInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__boxCheckInfo(struct soap*, _ns1__boxCheckInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__boxCheckInfo
#define soap_write_PointerTo_ns1__boxCheckInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__boxCheckInfo(soap, data),0) || soap_put_PointerTo_ns1__boxCheckInfo(soap, data, "ns1:boxCheckInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__boxCheckInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__boxCheckInfo(struct soap*, _ns1__boxCheckInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__boxCheckInfo
#define soap_read_PointerTo_ns1__boxCheckInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__boxCheckInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__equipCheckInfo
#define SOAP_TYPE_PointerTo_ns1__equipCheckInfo (87)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__equipCheckInfo(struct soap*, _ns1__equipCheckInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__equipCheckInfo(struct soap*, const char *, int, _ns1__equipCheckInfo *const*, const char *);
SOAP_FMAC3 _ns1__equipCheckInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__equipCheckInfo(struct soap*, const char*, _ns1__equipCheckInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__equipCheckInfo(struct soap*, _ns1__equipCheckInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__equipCheckInfo
#define soap_write_PointerTo_ns1__equipCheckInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__equipCheckInfo(soap, data),0) || soap_put_PointerTo_ns1__equipCheckInfo(soap, data, "ns1:equipCheckInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__equipCheckInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__equipCheckInfo(struct soap*, _ns1__equipCheckInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__equipCheckInfo
#define soap_read_PointerTo_ns1__equipCheckInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__equipCheckInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__getDBConnInfo
#define SOAP_TYPE_PointerTo_ns1__getDBConnInfo (83)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getDBConnInfo(struct soap*, _ns1__getDBConnInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getDBConnInfo(struct soap*, const char *, int, _ns1__getDBConnInfo *const*, const char *);
SOAP_FMAC3 _ns1__getDBConnInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__getDBConnInfo(struct soap*, const char*, _ns1__getDBConnInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getDBConnInfo(struct soap*, _ns1__getDBConnInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__getDBConnInfo
#define soap_write_PointerTo_ns1__getDBConnInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__getDBConnInfo(soap, data),0) || soap_put_PointerTo_ns1__getDBConnInfo(soap, data, "ns1:getDBConnInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__getDBConnInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__getDBConnInfo(struct soap*, _ns1__getDBConnInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__getDBConnInfo
#define soap_read_PointerTo_ns1__getDBConnInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__getDBConnInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__applyEquip
#define SOAP_TYPE_PointerTo_ns1__applyEquip (79)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__applyEquip(struct soap*, _ns1__applyEquip *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__applyEquip(struct soap*, const char *, int, _ns1__applyEquip *const*, const char *);
SOAP_FMAC3 _ns1__applyEquip ** SOAP_FMAC4 soap_in_PointerTo_ns1__applyEquip(struct soap*, const char*, _ns1__applyEquip **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__applyEquip(struct soap*, _ns1__applyEquip *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__applyEquip
#define soap_write_PointerTo_ns1__applyEquip(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__applyEquip(soap, data),0) || soap_put_PointerTo_ns1__applyEquip(soap, data, "ns1:applyEquip", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__applyEquip ** SOAP_FMAC4 soap_get_PointerTo_ns1__applyEquip(struct soap*, _ns1__applyEquip **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__applyEquip
#define soap_read_PointerTo_ns1__applyEquip(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__applyEquip(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__getMachineHandInfo
#define SOAP_TYPE_PointerTo_ns1__getMachineHandInfo (75)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getMachineHandInfo(struct soap*, _ns1__getMachineHandInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getMachineHandInfo(struct soap*, const char *, int, _ns1__getMachineHandInfo *const*, const char *);
SOAP_FMAC3 _ns1__getMachineHandInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__getMachineHandInfo(struct soap*, const char*, _ns1__getMachineHandInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getMachineHandInfo(struct soap*, _ns1__getMachineHandInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__getMachineHandInfo
#define soap_write_PointerTo_ns1__getMachineHandInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__getMachineHandInfo(soap, data),0) || soap_put_PointerTo_ns1__getMachineHandInfo(soap, data, "ns1:getMachineHandInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__getMachineHandInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__getMachineHandInfo(struct soap*, _ns1__getMachineHandInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__getMachineHandInfo
#define soap_read_PointerTo_ns1__getMachineHandInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__getMachineHandInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__setResults
#define SOAP_TYPE_PointerTo_ns1__setResults (71)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__setResults(struct soap*, _ns1__setResults *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__setResults(struct soap*, const char *, int, _ns1__setResults *const*, const char *);
SOAP_FMAC3 _ns1__setResults ** SOAP_FMAC4 soap_in_PointerTo_ns1__setResults(struct soap*, const char*, _ns1__setResults **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__setResults(struct soap*, _ns1__setResults *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__setResults
#define soap_write_PointerTo_ns1__setResults(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__setResults(soap, data),0) || soap_put_PointerTo_ns1__setResults(soap, data, "ns1:setResults", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__setResults ** SOAP_FMAC4 soap_get_PointerTo_ns1__setResults(struct soap*, _ns1__setResults **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__setResults
#define soap_read_PointerTo_ns1__setResults(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__setResults(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__getDETedTestData
#define SOAP_TYPE_PointerTo_ns1__getDETedTestData (67)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getDETedTestData(struct soap*, _ns1__getDETedTestData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getDETedTestData(struct soap*, const char *, int, _ns1__getDETedTestData *const*, const char *);
SOAP_FMAC3 _ns1__getDETedTestData ** SOAP_FMAC4 soap_in_PointerTo_ns1__getDETedTestData(struct soap*, const char*, _ns1__getDETedTestData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getDETedTestData(struct soap*, _ns1__getDETedTestData *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__getDETedTestData
#define soap_write_PointerTo_ns1__getDETedTestData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__getDETedTestData(soap, data),0) || soap_put_PointerTo_ns1__getDETedTestData(soap, data, "ns1:getDETedTestData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__getDETedTestData ** SOAP_FMAC4 soap_get_PointerTo_ns1__getDETedTestData(struct soap*, _ns1__getDETedTestData **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__getDETedTestData
#define soap_read_PointerTo_ns1__getDETedTestData(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__getDETedTestData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__applyAssistEquip
#define SOAP_TYPE_PointerTo_ns1__applyAssistEquip (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__applyAssistEquip(struct soap*, _ns1__applyAssistEquip *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__applyAssistEquip(struct soap*, const char *, int, _ns1__applyAssistEquip *const*, const char *);
SOAP_FMAC3 _ns1__applyAssistEquip ** SOAP_FMAC4 soap_in_PointerTo_ns1__applyAssistEquip(struct soap*, const char*, _ns1__applyAssistEquip **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__applyAssistEquip(struct soap*, _ns1__applyAssistEquip *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__applyAssistEquip
#define soap_write_PointerTo_ns1__applyAssistEquip(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__applyAssistEquip(soap, data),0) || soap_put_PointerTo_ns1__applyAssistEquip(soap, data, "ns1:applyAssistEquip", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__applyAssistEquip ** SOAP_FMAC4 soap_get_PointerTo_ns1__applyAssistEquip(struct soap*, _ns1__applyAssistEquip **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__applyAssistEquip
#define soap_read_PointerTo_ns1__applyAssistEquip(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__applyAssistEquip(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__sendTaskFinishFlag
#define SOAP_TYPE_PointerTo_ns1__sendTaskFinishFlag (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__sendTaskFinishFlag(struct soap*, _ns1__sendTaskFinishFlag *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__sendTaskFinishFlag(struct soap*, const char *, int, _ns1__sendTaskFinishFlag *const*, const char *);
SOAP_FMAC3 _ns1__sendTaskFinishFlag ** SOAP_FMAC4 soap_in_PointerTo_ns1__sendTaskFinishFlag(struct soap*, const char*, _ns1__sendTaskFinishFlag **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__sendTaskFinishFlag(struct soap*, _ns1__sendTaskFinishFlag *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__sendTaskFinishFlag
#define soap_write_PointerTo_ns1__sendTaskFinishFlag(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__sendTaskFinishFlag(soap, data),0) || soap_put_PointerTo_ns1__sendTaskFinishFlag(soap, data, "ns1:sendTaskFinishFlag", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__sendTaskFinishFlag ** SOAP_FMAC4 soap_get_PointerTo_ns1__sendTaskFinishFlag(struct soap*, _ns1__sendTaskFinishFlag **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__sendTaskFinishFlag
#define soap_read_PointerTo_ns1__sendTaskFinishFlag(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__sendTaskFinishFlag(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__uploadSealsCode
#define SOAP_TYPE_PointerTo_ns1__uploadSealsCode (55)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__uploadSealsCode(struct soap*, _ns1__uploadSealsCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__uploadSealsCode(struct soap*, const char *, int, _ns1__uploadSealsCode *const*, const char *);
SOAP_FMAC3 _ns1__uploadSealsCode ** SOAP_FMAC4 soap_in_PointerTo_ns1__uploadSealsCode(struct soap*, const char*, _ns1__uploadSealsCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__uploadSealsCode(struct soap*, _ns1__uploadSealsCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__uploadSealsCode
#define soap_write_PointerTo_ns1__uploadSealsCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__uploadSealsCode(soap, data),0) || soap_put_PointerTo_ns1__uploadSealsCode(soap, data, "ns1:uploadSealsCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__uploadSealsCode ** SOAP_FMAC4 soap_get_PointerTo_ns1__uploadSealsCode(struct soap*, _ns1__uploadSealsCode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__uploadSealsCode
#define soap_read_PointerTo_ns1__uploadSealsCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__uploadSealsCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__sendCtrlTaskFinishFlag
#define SOAP_TYPE_PointerTo_ns1__sendCtrlTaskFinishFlag (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__sendCtrlTaskFinishFlag(struct soap*, _ns1__sendCtrlTaskFinishFlag *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__sendCtrlTaskFinishFlag(struct soap*, const char *, int, _ns1__sendCtrlTaskFinishFlag *const*, const char *);
SOAP_FMAC3 _ns1__sendCtrlTaskFinishFlag ** SOAP_FMAC4 soap_in_PointerTo_ns1__sendCtrlTaskFinishFlag(struct soap*, const char*, _ns1__sendCtrlTaskFinishFlag **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__sendCtrlTaskFinishFlag(struct soap*, _ns1__sendCtrlTaskFinishFlag *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__sendCtrlTaskFinishFlag
#define soap_write_PointerTo_ns1__sendCtrlTaskFinishFlag(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__sendCtrlTaskFinishFlag(soap, data),0) || soap_put_PointerTo_ns1__sendCtrlTaskFinishFlag(soap, data, "ns1:sendCtrlTaskFinishFlag", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__sendCtrlTaskFinishFlag ** SOAP_FMAC4 soap_get_PointerTo_ns1__sendCtrlTaskFinishFlag(struct soap*, _ns1__sendCtrlTaskFinishFlag **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__sendCtrlTaskFinishFlag
#define soap_read_PointerTo_ns1__sendCtrlTaskFinishFlag(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__sendCtrlTaskFinishFlag(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__uploadLabel
#define SOAP_TYPE_PointerTo_ns1__uploadLabel (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__uploadLabel(struct soap*, _ns1__uploadLabel *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__uploadLabel(struct soap*, const char *, int, _ns1__uploadLabel *const*, const char *);
SOAP_FMAC3 _ns1__uploadLabel ** SOAP_FMAC4 soap_in_PointerTo_ns1__uploadLabel(struct soap*, const char*, _ns1__uploadLabel **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__uploadLabel(struct soap*, _ns1__uploadLabel *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__uploadLabel
#define soap_write_PointerTo_ns1__uploadLabel(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__uploadLabel(soap, data),0) || soap_put_PointerTo_ns1__uploadLabel(soap, data, "ns1:uploadLabel", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__uploadLabel ** SOAP_FMAC4 soap_get_PointerTo_ns1__uploadLabel(struct soap*, _ns1__uploadLabel **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__uploadLabel
#define soap_read_PointerTo_ns1__uploadLabel(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__uploadLabel(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__getSealInfo
#define SOAP_TYPE_PointerTo_ns1__getSealInfo (43)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getSealInfo(struct soap*, _ns1__getSealInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getSealInfo(struct soap*, const char *, int, _ns1__getSealInfo *const*, const char *);
SOAP_FMAC3 _ns1__getSealInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__getSealInfo(struct soap*, const char*, _ns1__getSealInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getSealInfo(struct soap*, _ns1__getSealInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__getSealInfo
#define soap_write_PointerTo_ns1__getSealInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__getSealInfo(soap, data),0) || soap_put_PointerTo_ns1__getSealInfo(soap, data, "ns1:getSealInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__getSealInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__getSealInfo(struct soap*, _ns1__getSealInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__getSealInfo
#define soap_read_PointerTo_ns1__getSealInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__getSealInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__string(soap, data),0) || soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

/* End of soapH.h */
