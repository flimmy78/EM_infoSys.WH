/* mds.h
   Generated by wsdl2h 2.8.21 from http://10.229.255.177:8080/InterfaceWS/InterfaceBusiness/services/DetectService?wsdl and typemap.dat
   2015-07-23 07:35:06 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2014 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on mds.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://webservice.mpac.nari.com                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://webservice.mpac.nari.com"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://webservice.mpac.nari.com"
//gsoap ns1   schema namespace:	http://webservice.mpac.nari.com
//gsoap ns1   schema form:	qualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class _ns1__getSealInfo.
class _ns1__getSealInfo;

//  Forward declaration of class _ns1__getSealInfoResponse.
class _ns1__getSealInfoResponse;

//  Forward declaration of class _ns1__uploadLabel.
class _ns1__uploadLabel;

//  Forward declaration of class _ns1__uploadLabelResponse.
class _ns1__uploadLabelResponse;

//  Forward declaration of class _ns1__sendCtrlTaskFinishFlag.
class _ns1__sendCtrlTaskFinishFlag;

//  Forward declaration of class _ns1__sendCtrlTaskFinishFlagResponse.
class _ns1__sendCtrlTaskFinishFlagResponse;

//  Forward declaration of class _ns1__uploadSealsCode.
class _ns1__uploadSealsCode;

//  Forward declaration of class _ns1__uploadSealsCodeResponse.
class _ns1__uploadSealsCodeResponse;

//  Forward declaration of class _ns1__sendTaskFinishFlag.
class _ns1__sendTaskFinishFlag;

//  Forward declaration of class _ns1__sendTaskFinishFlagResponse.
class _ns1__sendTaskFinishFlagResponse;

//  Forward declaration of class _ns1__applyAssistEquip.
class _ns1__applyAssistEquip;

//  Forward declaration of class _ns1__applyAssistEquipResponse.
class _ns1__applyAssistEquipResponse;

//  Forward declaration of class _ns1__getDETedTestData.
class _ns1__getDETedTestData;

//  Forward declaration of class _ns1__getDETedTestDataResponse.
class _ns1__getDETedTestDataResponse;

//  Forward declaration of class _ns1__setResults.
class _ns1__setResults;

//  Forward declaration of class _ns1__setResultsResponse.
class _ns1__setResultsResponse;

//  Forward declaration of class _ns1__getMachineHandInfo.
class _ns1__getMachineHandInfo;

//  Forward declaration of class _ns1__getMachineHandInfoResponse.
class _ns1__getMachineHandInfoResponse;

//  Forward declaration of class _ns1__applyEquip.
class _ns1__applyEquip;

//  Forward declaration of class _ns1__applyEquipResponse.
class _ns1__applyEquipResponse;

//  Forward declaration of class _ns1__getDBConnInfo.
class _ns1__getDBConnInfo;

//  Forward declaration of class _ns1__getDBConnInfoResponse.
class _ns1__getDBConnInfoResponse;

//  Forward declaration of class _ns1__equipCheckInfo.
class _ns1__equipCheckInfo;

//  Forward declaration of class _ns1__equipCheckInfoResponse.
class _ns1__equipCheckInfoResponse;

//  Forward declaration of class _ns1__boxCheckInfo.
class _ns1__boxCheckInfo;

//  Forward declaration of class _ns1__boxCheckInfoResponse.
class _ns1__boxCheckInfoResponse;

//  Forward declaration of class _ns1__upBoxInputPileDet.
class _ns1__upBoxInputPileDet;

//  Forward declaration of class _ns1__upBoxInputPileDetResponse.
class _ns1__upBoxInputPileDetResponse;

//  Forward declaration of class _ns1__getAlarm.
class _ns1__getAlarm;

//  Forward declaration of class _ns1__getAlarmResponse.
class _ns1__getAlarmResponse;

//  Forward declaration of class _ns1__uploadPackInfo.
class _ns1__uploadPackInfo;

//  Forward declaration of class _ns1__uploadPackInfoResponse.
class _ns1__uploadPackInfoResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://webservice.mpac.nari.com                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://webservice.mpac.nari.com                                          *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://webservice.mpac.nari.com":getSealInfo
/// @brief "http://webservice.mpac.nari.com":getSealInfo is a complexType.
///
/// class _ns1__getSealInfo operations:
/// - soap_new__ns1__getSealInfo(soap*) allocate
/// - soap_new__ns1__getSealInfo(soap*, int num) allocate array
/// - soap_new_req__ns1__getSealInfo(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getSealInfo(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getSealInfo(soap*, _ns1__getSealInfo*) deserialize from a stream
/// - int soap_write__ns1__getSealInfo(soap, _ns1__getSealInfo*) serialize to a stream
class _ns1__getSealInfo
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":getSealInfoResponse
/// @brief "http://webservice.mpac.nari.com":getSealInfoResponse is a complexType.
///
/// class _ns1__getSealInfoResponse operations:
/// - soap_new__ns1__getSealInfoResponse(soap*) allocate
/// - soap_new__ns1__getSealInfoResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__getSealInfoResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getSealInfoResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getSealInfoResponse(soap*, _ns1__getSealInfoResponse*) deserialize from a stream
/// - int soap_write__ns1__getSealInfoResponse(soap, _ns1__getSealInfoResponse*) serialize to a stream
class _ns1__getSealInfoResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":uploadLabel
/// @brief "http://webservice.mpac.nari.com":uploadLabel is a complexType.
///
/// class _ns1__uploadLabel operations:
/// - soap_new__ns1__uploadLabel(soap*) allocate
/// - soap_new__ns1__uploadLabel(soap*, int num) allocate array
/// - soap_new_req__ns1__uploadLabel(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__uploadLabel(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__uploadLabel(soap*, _ns1__uploadLabel*) deserialize from a stream
/// - int soap_write__ns1__uploadLabel(soap, _ns1__uploadLabel*) serialize to a stream
class _ns1__uploadLabel
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":uploadLabelResponse
/// @brief "http://webservice.mpac.nari.com":uploadLabelResponse is a complexType.
///
/// class _ns1__uploadLabelResponse operations:
/// - soap_new__ns1__uploadLabelResponse(soap*) allocate
/// - soap_new__ns1__uploadLabelResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__uploadLabelResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__uploadLabelResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__uploadLabelResponse(soap*, _ns1__uploadLabelResponse*) deserialize from a stream
/// - int soap_write__ns1__uploadLabelResponse(soap, _ns1__uploadLabelResponse*) serialize to a stream
class _ns1__uploadLabelResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":sendCtrlTaskFinishFlag
/// @brief "http://webservice.mpac.nari.com":sendCtrlTaskFinishFlag is a complexType.
///
/// class _ns1__sendCtrlTaskFinishFlag operations:
/// - soap_new__ns1__sendCtrlTaskFinishFlag(soap*) allocate
/// - soap_new__ns1__sendCtrlTaskFinishFlag(soap*, int num) allocate array
/// - soap_new_req__ns1__sendCtrlTaskFinishFlag(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__sendCtrlTaskFinishFlag(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__sendCtrlTaskFinishFlag(soap*, _ns1__sendCtrlTaskFinishFlag*) deserialize from a stream
/// - int soap_write__ns1__sendCtrlTaskFinishFlag(soap, _ns1__sendCtrlTaskFinishFlag*) serialize to a stream
class _ns1__sendCtrlTaskFinishFlag
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":sendCtrlTaskFinishFlagResponse
/// @brief "http://webservice.mpac.nari.com":sendCtrlTaskFinishFlagResponse is a complexType.
///
/// class _ns1__sendCtrlTaskFinishFlagResponse operations:
/// - soap_new__ns1__sendCtrlTaskFinishFlagResponse(soap*) allocate
/// - soap_new__ns1__sendCtrlTaskFinishFlagResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__sendCtrlTaskFinishFlagResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__sendCtrlTaskFinishFlagResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__sendCtrlTaskFinishFlagResponse(soap*, _ns1__sendCtrlTaskFinishFlagResponse*) deserialize from a stream
/// - int soap_write__ns1__sendCtrlTaskFinishFlagResponse(soap, _ns1__sendCtrlTaskFinishFlagResponse*) serialize to a stream
class _ns1__sendCtrlTaskFinishFlagResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":uploadSealsCode
/// @brief "http://webservice.mpac.nari.com":uploadSealsCode is a complexType.
///
/// class _ns1__uploadSealsCode operations:
/// - soap_new__ns1__uploadSealsCode(soap*) allocate
/// - soap_new__ns1__uploadSealsCode(soap*, int num) allocate array
/// - soap_new_req__ns1__uploadSealsCode(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__uploadSealsCode(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__uploadSealsCode(soap*, _ns1__uploadSealsCode*) deserialize from a stream
/// - int soap_write__ns1__uploadSealsCode(soap, _ns1__uploadSealsCode*) serialize to a stream
class _ns1__uploadSealsCode
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":uploadSealsCodeResponse
/// @brief "http://webservice.mpac.nari.com":uploadSealsCodeResponse is a complexType.
///
/// class _ns1__uploadSealsCodeResponse operations:
/// - soap_new__ns1__uploadSealsCodeResponse(soap*) allocate
/// - soap_new__ns1__uploadSealsCodeResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__uploadSealsCodeResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__uploadSealsCodeResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__uploadSealsCodeResponse(soap*, _ns1__uploadSealsCodeResponse*) deserialize from a stream
/// - int soap_write__ns1__uploadSealsCodeResponse(soap, _ns1__uploadSealsCodeResponse*) serialize to a stream
class _ns1__uploadSealsCodeResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":sendTaskFinishFlag
/// @brief "http://webservice.mpac.nari.com":sendTaskFinishFlag is a complexType.
///
/// class _ns1__sendTaskFinishFlag operations:
/// - soap_new__ns1__sendTaskFinishFlag(soap*) allocate
/// - soap_new__ns1__sendTaskFinishFlag(soap*, int num) allocate array
/// - soap_new_req__ns1__sendTaskFinishFlag(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__sendTaskFinishFlag(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__sendTaskFinishFlag(soap*, _ns1__sendTaskFinishFlag*) deserialize from a stream
/// - int soap_write__ns1__sendTaskFinishFlag(soap, _ns1__sendTaskFinishFlag*) serialize to a stream
class _ns1__sendTaskFinishFlag
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":sendTaskFinishFlagResponse
/// @brief "http://webservice.mpac.nari.com":sendTaskFinishFlagResponse is a complexType.
///
/// class _ns1__sendTaskFinishFlagResponse operations:
/// - soap_new__ns1__sendTaskFinishFlagResponse(soap*) allocate
/// - soap_new__ns1__sendTaskFinishFlagResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__sendTaskFinishFlagResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__sendTaskFinishFlagResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__sendTaskFinishFlagResponse(soap*, _ns1__sendTaskFinishFlagResponse*) deserialize from a stream
/// - int soap_write__ns1__sendTaskFinishFlagResponse(soap, _ns1__sendTaskFinishFlagResponse*) serialize to a stream
class _ns1__sendTaskFinishFlagResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":applyAssistEquip
/// @brief "http://webservice.mpac.nari.com":applyAssistEquip is a complexType.
///
/// class _ns1__applyAssistEquip operations:
/// - soap_new__ns1__applyAssistEquip(soap*) allocate
/// - soap_new__ns1__applyAssistEquip(soap*, int num) allocate array
/// - soap_new_req__ns1__applyAssistEquip(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__applyAssistEquip(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__applyAssistEquip(soap*, _ns1__applyAssistEquip*) deserialize from a stream
/// - int soap_write__ns1__applyAssistEquip(soap, _ns1__applyAssistEquip*) serialize to a stream
class _ns1__applyAssistEquip
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":applyAssistEquipResponse
/// @brief "http://webservice.mpac.nari.com":applyAssistEquipResponse is a complexType.
///
/// class _ns1__applyAssistEquipResponse operations:
/// - soap_new__ns1__applyAssistEquipResponse(soap*) allocate
/// - soap_new__ns1__applyAssistEquipResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__applyAssistEquipResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__applyAssistEquipResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__applyAssistEquipResponse(soap*, _ns1__applyAssistEquipResponse*) deserialize from a stream
/// - int soap_write__ns1__applyAssistEquipResponse(soap, _ns1__applyAssistEquipResponse*) serialize to a stream
class _ns1__applyAssistEquipResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":getDETedTestData
/// @brief "http://webservice.mpac.nari.com":getDETedTestData is a complexType.
///
/// class _ns1__getDETedTestData operations:
/// - soap_new__ns1__getDETedTestData(soap*) allocate
/// - soap_new__ns1__getDETedTestData(soap*, int num) allocate array
/// - soap_new_req__ns1__getDETedTestData(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getDETedTestData(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getDETedTestData(soap*, _ns1__getDETedTestData*) deserialize from a stream
/// - int soap_write__ns1__getDETedTestData(soap, _ns1__getDETedTestData*) serialize to a stream
class _ns1__getDETedTestData
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":getDETedTestDataResponse
/// @brief "http://webservice.mpac.nari.com":getDETedTestDataResponse is a complexType.
///
/// class _ns1__getDETedTestDataResponse operations:
/// - soap_new__ns1__getDETedTestDataResponse(soap*) allocate
/// - soap_new__ns1__getDETedTestDataResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__getDETedTestDataResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getDETedTestDataResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getDETedTestDataResponse(soap*, _ns1__getDETedTestDataResponse*) deserialize from a stream
/// - int soap_write__ns1__getDETedTestDataResponse(soap, _ns1__getDETedTestDataResponse*) serialize to a stream
class _ns1__getDETedTestDataResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":setResults
/// @brief "http://webservice.mpac.nari.com":setResults is a complexType.
///
/// class _ns1__setResults operations:
/// - soap_new__ns1__setResults(soap*) allocate
/// - soap_new__ns1__setResults(soap*, int num) allocate array
/// - soap_new_req__ns1__setResults(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__setResults(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__setResults(soap*, _ns1__setResults*) deserialize from a stream
/// - int soap_write__ns1__setResults(soap, _ns1__setResults*) serialize to a stream
class _ns1__setResults
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":setResultsResponse
/// @brief "http://webservice.mpac.nari.com":setResultsResponse is a complexType.
///
/// class _ns1__setResultsResponse operations:
/// - soap_new__ns1__setResultsResponse(soap*) allocate
/// - soap_new__ns1__setResultsResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__setResultsResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__setResultsResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__setResultsResponse(soap*, _ns1__setResultsResponse*) deserialize from a stream
/// - int soap_write__ns1__setResultsResponse(soap, _ns1__setResultsResponse*) serialize to a stream
class _ns1__setResultsResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":getMachineHandInfo
/// @brief "http://webservice.mpac.nari.com":getMachineHandInfo is a complexType.
///
/// class _ns1__getMachineHandInfo operations:
/// - soap_new__ns1__getMachineHandInfo(soap*) allocate
/// - soap_new__ns1__getMachineHandInfo(soap*, int num) allocate array
/// - soap_new_req__ns1__getMachineHandInfo(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getMachineHandInfo(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getMachineHandInfo(soap*, _ns1__getMachineHandInfo*) deserialize from a stream
/// - int soap_write__ns1__getMachineHandInfo(soap, _ns1__getMachineHandInfo*) serialize to a stream
class _ns1__getMachineHandInfo
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":getMachineHandInfoResponse
/// @brief "http://webservice.mpac.nari.com":getMachineHandInfoResponse is a complexType.
///
/// class _ns1__getMachineHandInfoResponse operations:
/// - soap_new__ns1__getMachineHandInfoResponse(soap*) allocate
/// - soap_new__ns1__getMachineHandInfoResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__getMachineHandInfoResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getMachineHandInfoResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getMachineHandInfoResponse(soap*, _ns1__getMachineHandInfoResponse*) deserialize from a stream
/// - int soap_write__ns1__getMachineHandInfoResponse(soap, _ns1__getMachineHandInfoResponse*) serialize to a stream
class _ns1__getMachineHandInfoResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":applyEquip
/// @brief "http://webservice.mpac.nari.com":applyEquip is a complexType.
///
/// class _ns1__applyEquip operations:
/// - soap_new__ns1__applyEquip(soap*) allocate
/// - soap_new__ns1__applyEquip(soap*, int num) allocate array
/// - soap_new_req__ns1__applyEquip(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__applyEquip(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__applyEquip(soap*, _ns1__applyEquip*) deserialize from a stream
/// - int soap_write__ns1__applyEquip(soap, _ns1__applyEquip*) serialize to a stream
class _ns1__applyEquip
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":applyEquipResponse
/// @brief "http://webservice.mpac.nari.com":applyEquipResponse is a complexType.
///
/// class _ns1__applyEquipResponse operations:
/// - soap_new__ns1__applyEquipResponse(soap*) allocate
/// - soap_new__ns1__applyEquipResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__applyEquipResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__applyEquipResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__applyEquipResponse(soap*, _ns1__applyEquipResponse*) deserialize from a stream
/// - int soap_write__ns1__applyEquipResponse(soap, _ns1__applyEquipResponse*) serialize to a stream
class _ns1__applyEquipResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":getDBConnInfo
/// @brief "http://webservice.mpac.nari.com":getDBConnInfo is a complexType.
///
/// class _ns1__getDBConnInfo operations:
/// - soap_new__ns1__getDBConnInfo(soap*) allocate
/// - soap_new__ns1__getDBConnInfo(soap*, int num) allocate array
/// - soap_new_req__ns1__getDBConnInfo(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getDBConnInfo(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getDBConnInfo(soap*, _ns1__getDBConnInfo*) deserialize from a stream
/// - int soap_write__ns1__getDBConnInfo(soap, _ns1__getDBConnInfo*) serialize to a stream
class _ns1__getDBConnInfo
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":getDBConnInfoResponse
/// @brief "http://webservice.mpac.nari.com":getDBConnInfoResponse is a complexType.
///
/// class _ns1__getDBConnInfoResponse operations:
/// - soap_new__ns1__getDBConnInfoResponse(soap*) allocate
/// - soap_new__ns1__getDBConnInfoResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__getDBConnInfoResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getDBConnInfoResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getDBConnInfoResponse(soap*, _ns1__getDBConnInfoResponse*) deserialize from a stream
/// - int soap_write__ns1__getDBConnInfoResponse(soap, _ns1__getDBConnInfoResponse*) serialize to a stream
class _ns1__getDBConnInfoResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":equipCheckInfo
/// @brief "http://webservice.mpac.nari.com":equipCheckInfo is a complexType.
///
/// class _ns1__equipCheckInfo operations:
/// - soap_new__ns1__equipCheckInfo(soap*) allocate
/// - soap_new__ns1__equipCheckInfo(soap*, int num) allocate array
/// - soap_new_req__ns1__equipCheckInfo(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__equipCheckInfo(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__equipCheckInfo(soap*, _ns1__equipCheckInfo*) deserialize from a stream
/// - int soap_write__ns1__equipCheckInfo(soap, _ns1__equipCheckInfo*) serialize to a stream
class _ns1__equipCheckInfo
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":equipCheckInfoResponse
/// @brief "http://webservice.mpac.nari.com":equipCheckInfoResponse is a complexType.
///
/// class _ns1__equipCheckInfoResponse operations:
/// - soap_new__ns1__equipCheckInfoResponse(soap*) allocate
/// - soap_new__ns1__equipCheckInfoResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__equipCheckInfoResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__equipCheckInfoResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__equipCheckInfoResponse(soap*, _ns1__equipCheckInfoResponse*) deserialize from a stream
/// - int soap_write__ns1__equipCheckInfoResponse(soap, _ns1__equipCheckInfoResponse*) serialize to a stream
class _ns1__equipCheckInfoResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":boxCheckInfo
/// @brief "http://webservice.mpac.nari.com":boxCheckInfo is a complexType.
///
/// class _ns1__boxCheckInfo operations:
/// - soap_new__ns1__boxCheckInfo(soap*) allocate
/// - soap_new__ns1__boxCheckInfo(soap*, int num) allocate array
/// - soap_new_req__ns1__boxCheckInfo(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__boxCheckInfo(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__boxCheckInfo(soap*, _ns1__boxCheckInfo*) deserialize from a stream
/// - int soap_write__ns1__boxCheckInfo(soap, _ns1__boxCheckInfo*) serialize to a stream
class _ns1__boxCheckInfo
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":boxCheckInfoResponse
/// @brief "http://webservice.mpac.nari.com":boxCheckInfoResponse is a complexType.
///
/// class _ns1__boxCheckInfoResponse operations:
/// - soap_new__ns1__boxCheckInfoResponse(soap*) allocate
/// - soap_new__ns1__boxCheckInfoResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__boxCheckInfoResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__boxCheckInfoResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__boxCheckInfoResponse(soap*, _ns1__boxCheckInfoResponse*) deserialize from a stream
/// - int soap_write__ns1__boxCheckInfoResponse(soap, _ns1__boxCheckInfoResponse*) serialize to a stream
class _ns1__boxCheckInfoResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":upBoxInputPileDet
/// @brief "http://webservice.mpac.nari.com":upBoxInputPileDet is a complexType.
///
/// class _ns1__upBoxInputPileDet operations:
/// - soap_new__ns1__upBoxInputPileDet(soap*) allocate
/// - soap_new__ns1__upBoxInputPileDet(soap*, int num) allocate array
/// - soap_new_req__ns1__upBoxInputPileDet(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__upBoxInputPileDet(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__upBoxInputPileDet(soap*, _ns1__upBoxInputPileDet*) deserialize from a stream
/// - int soap_write__ns1__upBoxInputPileDet(soap, _ns1__upBoxInputPileDet*) serialize to a stream
class _ns1__upBoxInputPileDet
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":upBoxInputPileDetResponse
/// @brief "http://webservice.mpac.nari.com":upBoxInputPileDetResponse is a complexType.
///
/// class _ns1__upBoxInputPileDetResponse operations:
/// - soap_new__ns1__upBoxInputPileDetResponse(soap*) allocate
/// - soap_new__ns1__upBoxInputPileDetResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__upBoxInputPileDetResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__upBoxInputPileDetResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__upBoxInputPileDetResponse(soap*, _ns1__upBoxInputPileDetResponse*) deserialize from a stream
/// - int soap_write__ns1__upBoxInputPileDetResponse(soap, _ns1__upBoxInputPileDetResponse*) serialize to a stream
class _ns1__upBoxInputPileDetResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":getAlarm
/// @brief "http://webservice.mpac.nari.com":getAlarm is a complexType.
///
/// class _ns1__getAlarm operations:
/// - soap_new__ns1__getAlarm(soap*) allocate
/// - soap_new__ns1__getAlarm(soap*, int num) allocate array
/// - soap_new_req__ns1__getAlarm(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getAlarm(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getAlarm(soap*, _ns1__getAlarm*) deserialize from a stream
/// - int soap_write__ns1__getAlarm(soap, _ns1__getAlarm*) serialize to a stream
class _ns1__getAlarm
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":getAlarmResponse
/// @brief "http://webservice.mpac.nari.com":getAlarmResponse is a complexType.
///
/// class _ns1__getAlarmResponse operations:
/// - soap_new__ns1__getAlarmResponse(soap*) allocate
/// - soap_new__ns1__getAlarmResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__getAlarmResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__getAlarmResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__getAlarmResponse(soap*, _ns1__getAlarmResponse*) deserialize from a stream
/// - int soap_write__ns1__getAlarmResponse(soap, _ns1__getAlarmResponse*) serialize to a stream
class _ns1__getAlarmResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":uploadPackInfo
/// @brief "http://webservice.mpac.nari.com":uploadPackInfo is a complexType.
///
/// class _ns1__uploadPackInfo operations:
/// - soap_new__ns1__uploadPackInfo(soap*) allocate
/// - soap_new__ns1__uploadPackInfo(soap*, int num) allocate array
/// - soap_new_req__ns1__uploadPackInfo(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__uploadPackInfo(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__uploadPackInfo(soap*, _ns1__uploadPackInfo*) deserialize from a stream
/// - int soap_write__ns1__uploadPackInfo(soap, _ns1__uploadPackInfo*) serialize to a stream
class _ns1__uploadPackInfo
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://webservice.mpac.nari.com":uploadPackInfoResponse
/// @brief "http://webservice.mpac.nari.com":uploadPackInfoResponse is a complexType.
///
/// class _ns1__uploadPackInfoResponse operations:
/// - soap_new__ns1__uploadPackInfoResponse(soap*) allocate
/// - soap_new__ns1__uploadPackInfoResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__uploadPackInfoResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__uploadPackInfoResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__uploadPackInfoResponse(soap*, _ns1__uploadPackInfoResponse*) deserialize from a stream
/// - int soap_write__ns1__uploadPackInfoResponse(soap, _ns1__uploadPackInfoResponse*) serialize to a stream
class _ns1__uploadPackInfoResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://webservice.mpac.nari.com                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://webservice.mpac.nari.com                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	DetectServiceHttpBinding 
//gsoap ns1  service type:	DetectServicePortType 
//gsoap ns1  service port:	http://10.229.255.177:8080/InterfaceWS/InterfaceBusiness/services/DetectService 
//gsoap ns1  service namespace:	http://webservice.mpac.nari.com 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref DetectServiceHttpBinding

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page DetectServiceHttpBinding Binding "DetectServiceHttpBinding"

@section DetectServiceHttpBinding_operations Operations of Binding "DetectServiceHttpBinding"

  - @ref __ns1__getSealInfo

  - @ref __ns1__uploadLabel

  - @ref __ns1__sendCtrlTaskFinishFlag

  - @ref __ns1__uploadSealsCode

  - @ref __ns1__sendTaskFinishFlag

  - @ref __ns1__applyAssistEquip

  - @ref __ns1__getDETedTestData

  - @ref __ns1__setResults

  - @ref __ns1__getMachineHandInfo

  - @ref __ns1__applyEquip

  - @ref __ns1__getDBConnInfo

  - @ref __ns1__equipCheckInfo

  - @ref __ns1__boxCheckInfo

  - @ref __ns1__upBoxInputPileDet

  - @ref __ns1__getAlarm

  - @ref __ns1__uploadPackInfo

@section DetectServiceHttpBinding_ports Endpoints of Binding "DetectServiceHttpBinding"

  - http://10.229.255.177:8080/InterfaceWS/InterfaceBusiness/services/DetectService

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   DetectServiceHttpBinding                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSealInfo                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getSealInfo" of service binding "DetectServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSealInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getSealInfo*                  ns1__getSealInfo,
    // output parameters:
    _ns1__getSealInfoResponse          &ns1__getSealInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSealInfo(
    struct soap *soap,
    // input parameters:
    _ns1__getSealInfo*                  ns1__getSealInfo,
    // output parameters:
    _ns1__getSealInfoResponse          &ns1__getSealInfoResponse
  );
@endcode

C++ proxy class (defined in soapDetectServiceHttpBindingProxy.h):
@code
  class DetectServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDetectServiceHttpBindingService.h):
@code
  class DetectServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getSealInfo SOAP
//gsoap ns1  service method-style:	getSealInfo document
//gsoap ns1  service method-encoding:	getSealInfo literal
//gsoap ns1  service method-action:	getSealInfo ""
//gsoap ns1  service method-output-action:	getSealInfo Response
int __ns1__getSealInfo(
    _ns1__getSealInfo*                  ns1__getSealInfo,	///< Input parameter
    _ns1__getSealInfoResponse          &ns1__getSealInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__uploadLabel                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__uploadLabel" of service binding "DetectServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__uploadLabel(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__uploadLabel*                  ns1__uploadLabel,
    // output parameters:
    _ns1__uploadLabelResponse          &ns1__uploadLabelResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__uploadLabel(
    struct soap *soap,
    // input parameters:
    _ns1__uploadLabel*                  ns1__uploadLabel,
    // output parameters:
    _ns1__uploadLabelResponse          &ns1__uploadLabelResponse
  );
@endcode

C++ proxy class (defined in soapDetectServiceHttpBindingProxy.h):
@code
  class DetectServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDetectServiceHttpBindingService.h):
@code
  class DetectServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	uploadLabel SOAP
//gsoap ns1  service method-style:	uploadLabel document
//gsoap ns1  service method-encoding:	uploadLabel literal
//gsoap ns1  service method-action:	uploadLabel ""
//gsoap ns1  service method-output-action:	uploadLabel Response
int __ns1__uploadLabel(
    _ns1__uploadLabel*                  ns1__uploadLabel,	///< Input parameter
    _ns1__uploadLabelResponse          &ns1__uploadLabelResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__sendCtrlTaskFinishFlag                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__sendCtrlTaskFinishFlag" of service binding "DetectServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__sendCtrlTaskFinishFlag(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__sendCtrlTaskFinishFlag*       ns1__sendCtrlTaskFinishFlag,
    // output parameters:
    _ns1__sendCtrlTaskFinishFlagResponse&ns1__sendCtrlTaskFinishFlagResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__sendCtrlTaskFinishFlag(
    struct soap *soap,
    // input parameters:
    _ns1__sendCtrlTaskFinishFlag*       ns1__sendCtrlTaskFinishFlag,
    // output parameters:
    _ns1__sendCtrlTaskFinishFlagResponse&ns1__sendCtrlTaskFinishFlagResponse
  );
@endcode

C++ proxy class (defined in soapDetectServiceHttpBindingProxy.h):
@code
  class DetectServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDetectServiceHttpBindingService.h):
@code
  class DetectServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	sendCtrlTaskFinishFlag SOAP
//gsoap ns1  service method-style:	sendCtrlTaskFinishFlag document
//gsoap ns1  service method-encoding:	sendCtrlTaskFinishFlag literal
//gsoap ns1  service method-action:	sendCtrlTaskFinishFlag ""
//gsoap ns1  service method-output-action:	sendCtrlTaskFinishFlag Response
int __ns1__sendCtrlTaskFinishFlag(
    _ns1__sendCtrlTaskFinishFlag*       ns1__sendCtrlTaskFinishFlag,	///< Input parameter
    _ns1__sendCtrlTaskFinishFlagResponse&ns1__sendCtrlTaskFinishFlagResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__uploadSealsCode                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__uploadSealsCode" of service binding "DetectServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__uploadSealsCode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__uploadSealsCode*              ns1__uploadSealsCode,
    // output parameters:
    _ns1__uploadSealsCodeResponse      &ns1__uploadSealsCodeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__uploadSealsCode(
    struct soap *soap,
    // input parameters:
    _ns1__uploadSealsCode*              ns1__uploadSealsCode,
    // output parameters:
    _ns1__uploadSealsCodeResponse      &ns1__uploadSealsCodeResponse
  );
@endcode

C++ proxy class (defined in soapDetectServiceHttpBindingProxy.h):
@code
  class DetectServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDetectServiceHttpBindingService.h):
@code
  class DetectServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	uploadSealsCode SOAP
//gsoap ns1  service method-style:	uploadSealsCode document
//gsoap ns1  service method-encoding:	uploadSealsCode literal
//gsoap ns1  service method-action:	uploadSealsCode ""
//gsoap ns1  service method-output-action:	uploadSealsCode Response
int __ns1__uploadSealsCode(
    _ns1__uploadSealsCode*              ns1__uploadSealsCode,	///< Input parameter
    _ns1__uploadSealsCodeResponse      &ns1__uploadSealsCodeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__sendTaskFinishFlag                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__sendTaskFinishFlag" of service binding "DetectServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__sendTaskFinishFlag(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__sendTaskFinishFlag*           ns1__sendTaskFinishFlag,
    // output parameters:
    _ns1__sendTaskFinishFlagResponse   &ns1__sendTaskFinishFlagResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__sendTaskFinishFlag(
    struct soap *soap,
    // input parameters:
    _ns1__sendTaskFinishFlag*           ns1__sendTaskFinishFlag,
    // output parameters:
    _ns1__sendTaskFinishFlagResponse   &ns1__sendTaskFinishFlagResponse
  );
@endcode

C++ proxy class (defined in soapDetectServiceHttpBindingProxy.h):
@code
  class DetectServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDetectServiceHttpBindingService.h):
@code
  class DetectServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	sendTaskFinishFlag SOAP
//gsoap ns1  service method-style:	sendTaskFinishFlag document
//gsoap ns1  service method-encoding:	sendTaskFinishFlag literal
//gsoap ns1  service method-action:	sendTaskFinishFlag ""
//gsoap ns1  service method-output-action:	sendTaskFinishFlag Response
int __ns1__sendTaskFinishFlag(
    _ns1__sendTaskFinishFlag*           ns1__sendTaskFinishFlag,	///< Input parameter
    _ns1__sendTaskFinishFlagResponse   &ns1__sendTaskFinishFlagResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__applyAssistEquip                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__applyAssistEquip" of service binding "DetectServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__applyAssistEquip(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__applyAssistEquip*             ns1__applyAssistEquip,
    // output parameters:
    _ns1__applyAssistEquipResponse     &ns1__applyAssistEquipResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__applyAssistEquip(
    struct soap *soap,
    // input parameters:
    _ns1__applyAssistEquip*             ns1__applyAssistEquip,
    // output parameters:
    _ns1__applyAssistEquipResponse     &ns1__applyAssistEquipResponse
  );
@endcode

C++ proxy class (defined in soapDetectServiceHttpBindingProxy.h):
@code
  class DetectServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDetectServiceHttpBindingService.h):
@code
  class DetectServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	applyAssistEquip SOAP
//gsoap ns1  service method-style:	applyAssistEquip document
//gsoap ns1  service method-encoding:	applyAssistEquip literal
//gsoap ns1  service method-action:	applyAssistEquip ""
//gsoap ns1  service method-output-action:	applyAssistEquip Response
int __ns1__applyAssistEquip(
    _ns1__applyAssistEquip*             ns1__applyAssistEquip,	///< Input parameter
    _ns1__applyAssistEquipResponse     &ns1__applyAssistEquipResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getDETedTestData                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getDETedTestData" of service binding "DetectServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getDETedTestData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getDETedTestData*             ns1__getDETedTestData,
    // output parameters:
    _ns1__getDETedTestDataResponse     &ns1__getDETedTestDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getDETedTestData(
    struct soap *soap,
    // input parameters:
    _ns1__getDETedTestData*             ns1__getDETedTestData,
    // output parameters:
    _ns1__getDETedTestDataResponse     &ns1__getDETedTestDataResponse
  );
@endcode

C++ proxy class (defined in soapDetectServiceHttpBindingProxy.h):
@code
  class DetectServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDetectServiceHttpBindingService.h):
@code
  class DetectServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getDETedTestData SOAP
//gsoap ns1  service method-style:	getDETedTestData document
//gsoap ns1  service method-encoding:	getDETedTestData literal
//gsoap ns1  service method-action:	getDETedTestData ""
//gsoap ns1  service method-output-action:	getDETedTestData Response
int __ns1__getDETedTestData(
    _ns1__getDETedTestData*             ns1__getDETedTestData,	///< Input parameter
    _ns1__getDETedTestDataResponse     &ns1__getDETedTestDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__setResults                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__setResults" of service binding "DetectServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__setResults(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__setResults*                   ns1__setResults,
    // output parameters:
    _ns1__setResultsResponse           &ns1__setResultsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__setResults(
    struct soap *soap,
    // input parameters:
    _ns1__setResults*                   ns1__setResults,
    // output parameters:
    _ns1__setResultsResponse           &ns1__setResultsResponse
  );
@endcode

C++ proxy class (defined in soapDetectServiceHttpBindingProxy.h):
@code
  class DetectServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDetectServiceHttpBindingService.h):
@code
  class DetectServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	setResults SOAP
//gsoap ns1  service method-style:	setResults document
//gsoap ns1  service method-encoding:	setResults literal
//gsoap ns1  service method-action:	setResults ""
//gsoap ns1  service method-output-action:	setResults Response
int __ns1__setResults(
    _ns1__setResults*                   ns1__setResults,	///< Input parameter
    _ns1__setResultsResponse           &ns1__setResultsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getMachineHandInfo                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getMachineHandInfo" of service binding "DetectServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getMachineHandInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getMachineHandInfo*           ns1__getMachineHandInfo,
    // output parameters:
    _ns1__getMachineHandInfoResponse   &ns1__getMachineHandInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getMachineHandInfo(
    struct soap *soap,
    // input parameters:
    _ns1__getMachineHandInfo*           ns1__getMachineHandInfo,
    // output parameters:
    _ns1__getMachineHandInfoResponse   &ns1__getMachineHandInfoResponse
  );
@endcode

C++ proxy class (defined in soapDetectServiceHttpBindingProxy.h):
@code
  class DetectServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDetectServiceHttpBindingService.h):
@code
  class DetectServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getMachineHandInfo SOAP
//gsoap ns1  service method-style:	getMachineHandInfo document
//gsoap ns1  service method-encoding:	getMachineHandInfo literal
//gsoap ns1  service method-action:	getMachineHandInfo ""
//gsoap ns1  service method-output-action:	getMachineHandInfo Response
int __ns1__getMachineHandInfo(
    _ns1__getMachineHandInfo*           ns1__getMachineHandInfo,	///< Input parameter
    _ns1__getMachineHandInfoResponse   &ns1__getMachineHandInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__applyEquip                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__applyEquip" of service binding "DetectServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__applyEquip(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__applyEquip*                   ns1__applyEquip,
    // output parameters:
    _ns1__applyEquipResponse           &ns1__applyEquipResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__applyEquip(
    struct soap *soap,
    // input parameters:
    _ns1__applyEquip*                   ns1__applyEquip,
    // output parameters:
    _ns1__applyEquipResponse           &ns1__applyEquipResponse
  );
@endcode

C++ proxy class (defined in soapDetectServiceHttpBindingProxy.h):
@code
  class DetectServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDetectServiceHttpBindingService.h):
@code
  class DetectServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	applyEquip SOAP
//gsoap ns1  service method-style:	applyEquip document
//gsoap ns1  service method-encoding:	applyEquip literal
//gsoap ns1  service method-action:	applyEquip ""
//gsoap ns1  service method-output-action:	applyEquip Response
int __ns1__applyEquip(
    _ns1__applyEquip*                   ns1__applyEquip,	///< Input parameter
    _ns1__applyEquipResponse           &ns1__applyEquipResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getDBConnInfo                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getDBConnInfo" of service binding "DetectServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getDBConnInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getDBConnInfo*                ns1__getDBConnInfo,
    // output parameters:
    _ns1__getDBConnInfoResponse        &ns1__getDBConnInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getDBConnInfo(
    struct soap *soap,
    // input parameters:
    _ns1__getDBConnInfo*                ns1__getDBConnInfo,
    // output parameters:
    _ns1__getDBConnInfoResponse        &ns1__getDBConnInfoResponse
  );
@endcode

C++ proxy class (defined in soapDetectServiceHttpBindingProxy.h):
@code
  class DetectServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDetectServiceHttpBindingService.h):
@code
  class DetectServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getDBConnInfo SOAP
//gsoap ns1  service method-style:	getDBConnInfo document
//gsoap ns1  service method-encoding:	getDBConnInfo literal
//gsoap ns1  service method-action:	getDBConnInfo ""
//gsoap ns1  service method-output-action:	getDBConnInfo Response
int __ns1__getDBConnInfo(
    _ns1__getDBConnInfo*                ns1__getDBConnInfo,	///< Input parameter
    _ns1__getDBConnInfoResponse        &ns1__getDBConnInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__equipCheckInfo                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__equipCheckInfo" of service binding "DetectServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__equipCheckInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__equipCheckInfo*               ns1__equipCheckInfo,
    // output parameters:
    _ns1__equipCheckInfoResponse       &ns1__equipCheckInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__equipCheckInfo(
    struct soap *soap,
    // input parameters:
    _ns1__equipCheckInfo*               ns1__equipCheckInfo,
    // output parameters:
    _ns1__equipCheckInfoResponse       &ns1__equipCheckInfoResponse
  );
@endcode

C++ proxy class (defined in soapDetectServiceHttpBindingProxy.h):
@code
  class DetectServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDetectServiceHttpBindingService.h):
@code
  class DetectServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	equipCheckInfo SOAP
//gsoap ns1  service method-style:	equipCheckInfo document
//gsoap ns1  service method-encoding:	equipCheckInfo literal
//gsoap ns1  service method-action:	equipCheckInfo ""
//gsoap ns1  service method-output-action:	equipCheckInfo Response
int __ns1__equipCheckInfo(
    _ns1__equipCheckInfo*               ns1__equipCheckInfo,	///< Input parameter
    _ns1__equipCheckInfoResponse       &ns1__equipCheckInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__boxCheckInfo                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__boxCheckInfo" of service binding "DetectServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__boxCheckInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__boxCheckInfo*                 ns1__boxCheckInfo,
    // output parameters:
    _ns1__boxCheckInfoResponse         &ns1__boxCheckInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__boxCheckInfo(
    struct soap *soap,
    // input parameters:
    _ns1__boxCheckInfo*                 ns1__boxCheckInfo,
    // output parameters:
    _ns1__boxCheckInfoResponse         &ns1__boxCheckInfoResponse
  );
@endcode

C++ proxy class (defined in soapDetectServiceHttpBindingProxy.h):
@code
  class DetectServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDetectServiceHttpBindingService.h):
@code
  class DetectServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	boxCheckInfo SOAP
//gsoap ns1  service method-style:	boxCheckInfo document
//gsoap ns1  service method-encoding:	boxCheckInfo literal
//gsoap ns1  service method-action:	boxCheckInfo ""
//gsoap ns1  service method-output-action:	boxCheckInfo Response
int __ns1__boxCheckInfo(
    _ns1__boxCheckInfo*                 ns1__boxCheckInfo,	///< Input parameter
    _ns1__boxCheckInfoResponse         &ns1__boxCheckInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__upBoxInputPileDet                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__upBoxInputPileDet" of service binding "DetectServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__upBoxInputPileDet(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__upBoxInputPileDet*            ns1__upBoxInputPileDet,
    // output parameters:
    _ns1__upBoxInputPileDetResponse    &ns1__upBoxInputPileDetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__upBoxInputPileDet(
    struct soap *soap,
    // input parameters:
    _ns1__upBoxInputPileDet*            ns1__upBoxInputPileDet,
    // output parameters:
    _ns1__upBoxInputPileDetResponse    &ns1__upBoxInputPileDetResponse
  );
@endcode

C++ proxy class (defined in soapDetectServiceHttpBindingProxy.h):
@code
  class DetectServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDetectServiceHttpBindingService.h):
@code
  class DetectServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	upBoxInputPileDet SOAP
//gsoap ns1  service method-style:	upBoxInputPileDet document
//gsoap ns1  service method-encoding:	upBoxInputPileDet literal
//gsoap ns1  service method-action:	upBoxInputPileDet ""
//gsoap ns1  service method-output-action:	upBoxInputPileDet Response
int __ns1__upBoxInputPileDet(
    _ns1__upBoxInputPileDet*            ns1__upBoxInputPileDet,	///< Input parameter
    _ns1__upBoxInputPileDetResponse    &ns1__upBoxInputPileDetResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getAlarm                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getAlarm" of service binding "DetectServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getAlarm(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getAlarm*                     ns1__getAlarm,
    // output parameters:
    _ns1__getAlarmResponse             &ns1__getAlarmResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getAlarm(
    struct soap *soap,
    // input parameters:
    _ns1__getAlarm*                     ns1__getAlarm,
    // output parameters:
    _ns1__getAlarmResponse             &ns1__getAlarmResponse
  );
@endcode

C++ proxy class (defined in soapDetectServiceHttpBindingProxy.h):
@code
  class DetectServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDetectServiceHttpBindingService.h):
@code
  class DetectServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getAlarm SOAP
//gsoap ns1  service method-style:	getAlarm document
//gsoap ns1  service method-encoding:	getAlarm literal
//gsoap ns1  service method-action:	getAlarm ""
//gsoap ns1  service method-output-action:	getAlarm Response
int __ns1__getAlarm(
    _ns1__getAlarm*                     ns1__getAlarm,	///< Input parameter
    _ns1__getAlarmResponse             &ns1__getAlarmResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__uploadPackInfo                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__uploadPackInfo" of service binding "DetectServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__uploadPackInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__uploadPackInfo*               ns1__uploadPackInfo,
    // output parameters:
    _ns1__uploadPackInfoResponse       &ns1__uploadPackInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__uploadPackInfo(
    struct soap *soap,
    // input parameters:
    _ns1__uploadPackInfo*               ns1__uploadPackInfo,
    // output parameters:
    _ns1__uploadPackInfoResponse       &ns1__uploadPackInfoResponse
  );
@endcode

C++ proxy class (defined in soapDetectServiceHttpBindingProxy.h):
@code
  class DetectServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDetectServiceHttpBindingService.h):
@code
  class DetectServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	uploadPackInfo SOAP
//gsoap ns1  service method-style:	uploadPackInfo document
//gsoap ns1  service method-encoding:	uploadPackInfo literal
//gsoap ns1  service method-action:	uploadPackInfo ""
//gsoap ns1  service method-output-action:	uploadPackInfo Response
int __ns1__uploadPackInfo(
    _ns1__uploadPackInfo*               ns1__uploadPackInfo,	///< Input parameter
    _ns1__uploadPackInfoResponse       &ns1__uploadPackInfoResponse	///< Output parameter
);

/**

@page DetectServiceHttpBinding Binding "DetectServiceHttpBinding"

@section DetectServiceHttpBinding_policy_enablers Policy Enablers of Binding "DetectServiceHttpBinding"

Based on policies, this service imports

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://webservice.mpac.nari.com"

  - <getSealInfo> @ref _ns1__getSealInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getSealInfo(struct soap*, _ns1__getSealInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getSealInfo(struct soap*, _ns1__getSealInfo*);
    @endcode

  - <getSealInfoResponse> @ref _ns1__getSealInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getSealInfoResponse(struct soap*, _ns1__getSealInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getSealInfoResponse(struct soap*, _ns1__getSealInfoResponse*);
    @endcode

  - <uploadLabel> @ref _ns1__uploadLabel
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__uploadLabel(struct soap*, _ns1__uploadLabel*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__uploadLabel(struct soap*, _ns1__uploadLabel*);
    @endcode

  - <uploadLabelResponse> @ref _ns1__uploadLabelResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__uploadLabelResponse(struct soap*, _ns1__uploadLabelResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__uploadLabelResponse(struct soap*, _ns1__uploadLabelResponse*);
    @endcode

  - <sendCtrlTaskFinishFlag> @ref _ns1__sendCtrlTaskFinishFlag
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__sendCtrlTaskFinishFlag(struct soap*, _ns1__sendCtrlTaskFinishFlag*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__sendCtrlTaskFinishFlag(struct soap*, _ns1__sendCtrlTaskFinishFlag*);
    @endcode

  - <sendCtrlTaskFinishFlagResponse> @ref _ns1__sendCtrlTaskFinishFlagResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__sendCtrlTaskFinishFlagResponse(struct soap*, _ns1__sendCtrlTaskFinishFlagResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__sendCtrlTaskFinishFlagResponse(struct soap*, _ns1__sendCtrlTaskFinishFlagResponse*);
    @endcode

  - <uploadSealsCode> @ref _ns1__uploadSealsCode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__uploadSealsCode(struct soap*, _ns1__uploadSealsCode*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__uploadSealsCode(struct soap*, _ns1__uploadSealsCode*);
    @endcode

  - <uploadSealsCodeResponse> @ref _ns1__uploadSealsCodeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__uploadSealsCodeResponse(struct soap*, _ns1__uploadSealsCodeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__uploadSealsCodeResponse(struct soap*, _ns1__uploadSealsCodeResponse*);
    @endcode

  - <sendTaskFinishFlag> @ref _ns1__sendTaskFinishFlag
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__sendTaskFinishFlag(struct soap*, _ns1__sendTaskFinishFlag*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__sendTaskFinishFlag(struct soap*, _ns1__sendTaskFinishFlag*);
    @endcode

  - <sendTaskFinishFlagResponse> @ref _ns1__sendTaskFinishFlagResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__sendTaskFinishFlagResponse(struct soap*, _ns1__sendTaskFinishFlagResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__sendTaskFinishFlagResponse(struct soap*, _ns1__sendTaskFinishFlagResponse*);
    @endcode

  - <applyAssistEquip> @ref _ns1__applyAssistEquip
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__applyAssistEquip(struct soap*, _ns1__applyAssistEquip*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__applyAssistEquip(struct soap*, _ns1__applyAssistEquip*);
    @endcode

  - <applyAssistEquipResponse> @ref _ns1__applyAssistEquipResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__applyAssistEquipResponse(struct soap*, _ns1__applyAssistEquipResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__applyAssistEquipResponse(struct soap*, _ns1__applyAssistEquipResponse*);
    @endcode

  - <getDETedTestData> @ref _ns1__getDETedTestData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getDETedTestData(struct soap*, _ns1__getDETedTestData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getDETedTestData(struct soap*, _ns1__getDETedTestData*);
    @endcode

  - <getDETedTestDataResponse> @ref _ns1__getDETedTestDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getDETedTestDataResponse(struct soap*, _ns1__getDETedTestDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getDETedTestDataResponse(struct soap*, _ns1__getDETedTestDataResponse*);
    @endcode

  - <setResults> @ref _ns1__setResults
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__setResults(struct soap*, _ns1__setResults*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__setResults(struct soap*, _ns1__setResults*);
    @endcode

  - <setResultsResponse> @ref _ns1__setResultsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__setResultsResponse(struct soap*, _ns1__setResultsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__setResultsResponse(struct soap*, _ns1__setResultsResponse*);
    @endcode

  - <getMachineHandInfo> @ref _ns1__getMachineHandInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getMachineHandInfo(struct soap*, _ns1__getMachineHandInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getMachineHandInfo(struct soap*, _ns1__getMachineHandInfo*);
    @endcode

  - <getMachineHandInfoResponse> @ref _ns1__getMachineHandInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getMachineHandInfoResponse(struct soap*, _ns1__getMachineHandInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getMachineHandInfoResponse(struct soap*, _ns1__getMachineHandInfoResponse*);
    @endcode

  - <applyEquip> @ref _ns1__applyEquip
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__applyEquip(struct soap*, _ns1__applyEquip*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__applyEquip(struct soap*, _ns1__applyEquip*);
    @endcode

  - <applyEquipResponse> @ref _ns1__applyEquipResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__applyEquipResponse(struct soap*, _ns1__applyEquipResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__applyEquipResponse(struct soap*, _ns1__applyEquipResponse*);
    @endcode

  - <getDBConnInfo> @ref _ns1__getDBConnInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getDBConnInfo(struct soap*, _ns1__getDBConnInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getDBConnInfo(struct soap*, _ns1__getDBConnInfo*);
    @endcode

  - <getDBConnInfoResponse> @ref _ns1__getDBConnInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getDBConnInfoResponse(struct soap*, _ns1__getDBConnInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getDBConnInfoResponse(struct soap*, _ns1__getDBConnInfoResponse*);
    @endcode

  - <equipCheckInfo> @ref _ns1__equipCheckInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__equipCheckInfo(struct soap*, _ns1__equipCheckInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__equipCheckInfo(struct soap*, _ns1__equipCheckInfo*);
    @endcode

  - <equipCheckInfoResponse> @ref _ns1__equipCheckInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__equipCheckInfoResponse(struct soap*, _ns1__equipCheckInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__equipCheckInfoResponse(struct soap*, _ns1__equipCheckInfoResponse*);
    @endcode

  - <boxCheckInfo> @ref _ns1__boxCheckInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__boxCheckInfo(struct soap*, _ns1__boxCheckInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__boxCheckInfo(struct soap*, _ns1__boxCheckInfo*);
    @endcode

  - <boxCheckInfoResponse> @ref _ns1__boxCheckInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__boxCheckInfoResponse(struct soap*, _ns1__boxCheckInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__boxCheckInfoResponse(struct soap*, _ns1__boxCheckInfoResponse*);
    @endcode

  - <upBoxInputPileDet> @ref _ns1__upBoxInputPileDet
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__upBoxInputPileDet(struct soap*, _ns1__upBoxInputPileDet*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__upBoxInputPileDet(struct soap*, _ns1__upBoxInputPileDet*);
    @endcode

  - <upBoxInputPileDetResponse> @ref _ns1__upBoxInputPileDetResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__upBoxInputPileDetResponse(struct soap*, _ns1__upBoxInputPileDetResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__upBoxInputPileDetResponse(struct soap*, _ns1__upBoxInputPileDetResponse*);
    @endcode

  - <getAlarm> @ref _ns1__getAlarm
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getAlarm(struct soap*, _ns1__getAlarm*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getAlarm(struct soap*, _ns1__getAlarm*);
    @endcode

  - <getAlarmResponse> @ref _ns1__getAlarmResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getAlarmResponse(struct soap*, _ns1__getAlarmResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getAlarmResponse(struct soap*, _ns1__getAlarmResponse*);
    @endcode

  - <uploadPackInfo> @ref _ns1__uploadPackInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__uploadPackInfo(struct soap*, _ns1__uploadPackInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__uploadPackInfo(struct soap*, _ns1__uploadPackInfo*);
    @endcode

  - <uploadPackInfoResponse> @ref _ns1__uploadPackInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__uploadPackInfoResponse(struct soap*, _ns1__uploadPackInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__uploadPackInfoResponse(struct soap*, _ns1__uploadPackInfoResponse*);
    @endcode

*/

/* End of mds.h */
